// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package db_instance

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/rds-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.RDS{}
	_ = &svcapitypes.DBInstance{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeDBInstancesOutput
	resp, err = rm.sdkapi.DescribeDBInstancesWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeDBInstances", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "DBInstanceNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.DBInstances {
		if elem.ActivityStreamEngineNativeAuditFieldsIncluded != nil {
			ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = elem.ActivityStreamEngineNativeAuditFieldsIncluded
		} else {
			ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = nil
		}
		if elem.ActivityStreamKinesisStreamName != nil {
			ko.Status.ActivityStreamKinesisStreamName = elem.ActivityStreamKinesisStreamName
		} else {
			ko.Status.ActivityStreamKinesisStreamName = nil
		}
		if elem.ActivityStreamKmsKeyId != nil {
			ko.Status.ActivityStreamKMSKeyID = elem.ActivityStreamKmsKeyId
		} else {
			ko.Status.ActivityStreamKMSKeyID = nil
		}
		if elem.ActivityStreamMode != nil {
			ko.Status.ActivityStreamMode = elem.ActivityStreamMode
		} else {
			ko.Status.ActivityStreamMode = nil
		}
		if elem.ActivityStreamPolicyStatus != nil {
			ko.Status.ActivityStreamPolicyStatus = elem.ActivityStreamPolicyStatus
		} else {
			ko.Status.ActivityStreamPolicyStatus = nil
		}
		if elem.ActivityStreamStatus != nil {
			ko.Status.ActivityStreamStatus = elem.ActivityStreamStatus
		} else {
			ko.Status.ActivityStreamStatus = nil
		}
		if elem.AllocatedStorage != nil {
			ko.Spec.AllocatedStorage = elem.AllocatedStorage
		} else {
			ko.Spec.AllocatedStorage = nil
		}
		if elem.AssociatedRoles != nil {
			f7 := []*svcapitypes.DBInstanceRole{}
			for _, f7iter := range elem.AssociatedRoles {
				f7elem := &svcapitypes.DBInstanceRole{}
				if f7iter.FeatureName != nil {
					f7elem.FeatureName = f7iter.FeatureName
				}
				if f7iter.RoleArn != nil {
					f7elem.RoleARN = f7iter.RoleArn
				}
				if f7iter.Status != nil {
					f7elem.Status = f7iter.Status
				}
				f7 = append(f7, f7elem)
			}
			ko.Status.AssociatedRoles = f7
		} else {
			ko.Status.AssociatedRoles = nil
		}
		if elem.AutoMinorVersionUpgrade != nil {
			ko.Spec.AutoMinorVersionUpgrade = elem.AutoMinorVersionUpgrade
		} else {
			ko.Spec.AutoMinorVersionUpgrade = nil
		}
		if elem.AutomaticRestartTime != nil {
			ko.Status.AutomaticRestartTime = &metav1.Time{*elem.AutomaticRestartTime}
		} else {
			ko.Status.AutomaticRestartTime = nil
		}
		if elem.AutomationMode != nil {
			ko.Status.AutomationMode = elem.AutomationMode
		} else {
			ko.Status.AutomationMode = nil
		}
		if elem.AvailabilityZone != nil {
			ko.Spec.AvailabilityZone = elem.AvailabilityZone
		} else {
			ko.Spec.AvailabilityZone = nil
		}
		if elem.AwsBackupRecoveryPointArn != nil {
			ko.Status.AWSBackupRecoveryPointARN = elem.AwsBackupRecoveryPointArn
		} else {
			ko.Status.AWSBackupRecoveryPointARN = nil
		}
		if elem.BackupRetentionPeriod != nil {
			ko.Spec.BackupRetentionPeriod = elem.BackupRetentionPeriod
		} else {
			ko.Spec.BackupRetentionPeriod = nil
		}
		if elem.BackupTarget != nil {
			ko.Spec.BackupTarget = elem.BackupTarget
		} else {
			ko.Spec.BackupTarget = nil
		}
		if elem.CACertificateIdentifier != nil {
			ko.Status.CACertificateIdentifier = elem.CACertificateIdentifier
		} else {
			ko.Status.CACertificateIdentifier = nil
		}
		if elem.CharacterSetName != nil {
			ko.Spec.CharacterSetName = elem.CharacterSetName
		} else {
			ko.Spec.CharacterSetName = nil
		}
		if elem.CopyTagsToSnapshot != nil {
			ko.Spec.CopyTagsToSnapshot = elem.CopyTagsToSnapshot
		} else {
			ko.Spec.CopyTagsToSnapshot = nil
		}
		if elem.CustomIamInstanceProfile != nil {
			ko.Spec.CustomIAMInstanceProfile = elem.CustomIamInstanceProfile
		} else {
			ko.Spec.CustomIAMInstanceProfile = nil
		}
		if elem.CustomerOwnedIpEnabled != nil {
			ko.Status.CustomerOwnedIPEnabled = elem.CustomerOwnedIpEnabled
		} else {
			ko.Status.CustomerOwnedIPEnabled = nil
		}
		if elem.DBClusterIdentifier != nil {
			ko.Spec.DBClusterIdentifier = elem.DBClusterIdentifier
		} else {
			ko.Spec.DBClusterIdentifier = nil
		}
		if elem.DBInstanceArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.DBInstanceArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.DBInstanceAutomatedBackupsReplications != nil {
			f22 := []*svcapitypes.DBInstanceAutomatedBackupsReplication{}
			for _, f22iter := range elem.DBInstanceAutomatedBackupsReplications {
				f22elem := &svcapitypes.DBInstanceAutomatedBackupsReplication{}
				if f22iter.DBInstanceAutomatedBackupsArn != nil {
					f22elem.DBInstanceAutomatedBackupsARN = f22iter.DBInstanceAutomatedBackupsArn
				}
				f22 = append(f22, f22elem)
			}
			ko.Status.DBInstanceAutomatedBackupsReplications = f22
		} else {
			ko.Status.DBInstanceAutomatedBackupsReplications = nil
		}
		if elem.DBInstanceClass != nil {
			ko.Spec.DBInstanceClass = elem.DBInstanceClass
		} else {
			ko.Spec.DBInstanceClass = nil
		}
		if elem.DBInstanceIdentifier != nil {
			ko.Spec.DBInstanceIdentifier = elem.DBInstanceIdentifier
		} else {
			ko.Spec.DBInstanceIdentifier = nil
		}
		if elem.DBInstanceStatus != nil {
			ko.Status.DBInstanceStatus = elem.DBInstanceStatus
		} else {
			ko.Status.DBInstanceStatus = nil
		}
		if elem.DBName != nil {
			ko.Spec.DBName = elem.DBName
		} else {
			ko.Spec.DBName = nil
		}
		if elem.DBParameterGroups != nil {
			f27 := []*svcapitypes.DBParameterGroupStatus_SDK{}
			for _, f27iter := range elem.DBParameterGroups {
				f27elem := &svcapitypes.DBParameterGroupStatus_SDK{}
				if f27iter.DBParameterGroupName != nil {
					f27elem.DBParameterGroupName = f27iter.DBParameterGroupName
				}
				if f27iter.ParameterApplyStatus != nil {
					f27elem.ParameterApplyStatus = f27iter.ParameterApplyStatus
				}
				f27 = append(f27, f27elem)
			}
			ko.Status.DBParameterGroups = f27
		} else {
			ko.Status.DBParameterGroups = nil
		}
		if elem.DBSubnetGroup != nil {
			f28 := &svcapitypes.DBSubnetGroup_SDK{}
			if elem.DBSubnetGroup.DBSubnetGroupArn != nil {
				f28.DBSubnetGroupARN = elem.DBSubnetGroup.DBSubnetGroupArn
			}
			if elem.DBSubnetGroup.DBSubnetGroupDescription != nil {
				f28.DBSubnetGroupDescription = elem.DBSubnetGroup.DBSubnetGroupDescription
			}
			if elem.DBSubnetGroup.DBSubnetGroupName != nil {
				f28.DBSubnetGroupName = elem.DBSubnetGroup.DBSubnetGroupName
			}
			if elem.DBSubnetGroup.SubnetGroupStatus != nil {
				f28.SubnetGroupStatus = elem.DBSubnetGroup.SubnetGroupStatus
			}
			if elem.DBSubnetGroup.Subnets != nil {
				f28f4 := []*svcapitypes.Subnet{}
				for _, f28f4iter := range elem.DBSubnetGroup.Subnets {
					f28f4elem := &svcapitypes.Subnet{}
					if f28f4iter.SubnetAvailabilityZone != nil {
						f28f4elemf0 := &svcapitypes.AvailabilityZone{}
						if f28f4iter.SubnetAvailabilityZone.Name != nil {
							f28f4elemf0.Name = f28f4iter.SubnetAvailabilityZone.Name
						}
						f28f4elem.SubnetAvailabilityZone = f28f4elemf0
					}
					if f28f4iter.SubnetIdentifier != nil {
						f28f4elem.SubnetIdentifier = f28f4iter.SubnetIdentifier
					}
					if f28f4iter.SubnetOutpost != nil {
						f28f4elemf2 := &svcapitypes.Outpost{}
						if f28f4iter.SubnetOutpost.Arn != nil {
							f28f4elemf2.ARN = f28f4iter.SubnetOutpost.Arn
						}
						f28f4elem.SubnetOutpost = f28f4elemf2
					}
					if f28f4iter.SubnetStatus != nil {
						f28f4elem.SubnetStatus = f28f4iter.SubnetStatus
					}
					f28f4 = append(f28f4, f28f4elem)
				}
				f28.Subnets = f28f4
			}
			if elem.DBSubnetGroup.SupportedNetworkTypes != nil {
				f28f5 := []*string{}
				for _, f28f5iter := range elem.DBSubnetGroup.SupportedNetworkTypes {
					var f28f5elem string
					f28f5elem = *f28f5iter
					f28f5 = append(f28f5, &f28f5elem)
				}
				f28.SupportedNetworkTypes = f28f5
			}
			if elem.DBSubnetGroup.VpcId != nil {
				f28.VPCID = elem.DBSubnetGroup.VpcId
			}
			ko.Status.DBSubnetGroup = f28
		} else {
			ko.Status.DBSubnetGroup = nil
		}
		if elem.DbInstancePort != nil {
			ko.Status.DBInstancePort = elem.DbInstancePort
		} else {
			ko.Status.DBInstancePort = nil
		}
		if elem.DbiResourceId != nil {
			ko.Status.DBIResourceID = elem.DbiResourceId
		} else {
			ko.Status.DBIResourceID = nil
		}
		if elem.DeletionProtection != nil {
			ko.Spec.DeletionProtection = elem.DeletionProtection
		} else {
			ko.Spec.DeletionProtection = nil
		}
		if elem.DomainMemberships != nil {
			f32 := []*svcapitypes.DomainMembership{}
			for _, f32iter := range elem.DomainMemberships {
				f32elem := &svcapitypes.DomainMembership{}
				if f32iter.Domain != nil {
					f32elem.Domain = f32iter.Domain
				}
				if f32iter.FQDN != nil {
					f32elem.FQDN = f32iter.FQDN
				}
				if f32iter.IAMRoleName != nil {
					f32elem.IAMRoleName = f32iter.IAMRoleName
				}
				if f32iter.Status != nil {
					f32elem.Status = f32iter.Status
				}
				f32 = append(f32, f32elem)
			}
			ko.Status.DomainMemberships = f32
		} else {
			ko.Status.DomainMemberships = nil
		}
		if elem.EnabledCloudwatchLogsExports != nil {
			f33 := []*string{}
			for _, f33iter := range elem.EnabledCloudwatchLogsExports {
				var f33elem string
				f33elem = *f33iter
				f33 = append(f33, &f33elem)
			}
			ko.Status.EnabledCloudwatchLogsExports = f33
		} else {
			ko.Status.EnabledCloudwatchLogsExports = nil
		}
		if elem.Endpoint != nil {
			f34 := &svcapitypes.Endpoint{}
			if elem.Endpoint.Address != nil {
				f34.Address = elem.Endpoint.Address
			}
			if elem.Endpoint.HostedZoneId != nil {
				f34.HostedZoneID = elem.Endpoint.HostedZoneId
			}
			if elem.Endpoint.Port != nil {
				f34.Port = elem.Endpoint.Port
			}
			ko.Status.Endpoint = f34
		} else {
			ko.Status.Endpoint = nil
		}
		if elem.Engine != nil {
			ko.Spec.Engine = elem.Engine
		} else {
			ko.Spec.Engine = nil
		}
		if elem.EngineVersion != nil {
			ko.Spec.EngineVersion = elem.EngineVersion
		} else {
			ko.Spec.EngineVersion = nil
		}
		if elem.EnhancedMonitoringResourceArn != nil {
			ko.Status.EnhancedMonitoringResourceARN = elem.EnhancedMonitoringResourceArn
		} else {
			ko.Status.EnhancedMonitoringResourceARN = nil
		}
		if elem.IAMDatabaseAuthenticationEnabled != nil {
			ko.Status.IAMDatabaseAuthenticationEnabled = elem.IAMDatabaseAuthenticationEnabled
		} else {
			ko.Status.IAMDatabaseAuthenticationEnabled = nil
		}
		if elem.InstanceCreateTime != nil {
			ko.Status.InstanceCreateTime = &metav1.Time{*elem.InstanceCreateTime}
		} else {
			ko.Status.InstanceCreateTime = nil
		}
		if elem.Iops != nil {
			ko.Spec.IOPS = elem.Iops
		} else {
			ko.Spec.IOPS = nil
		}
		if elem.KmsKeyId != nil {
			ko.Spec.KMSKeyID = elem.KmsKeyId
		} else {
			ko.Spec.KMSKeyID = nil
		}
		if elem.LatestRestorableTime != nil {
			ko.Status.LatestRestorableTime = &metav1.Time{*elem.LatestRestorableTime}
		} else {
			ko.Status.LatestRestorableTime = nil
		}
		if elem.LicenseModel != nil {
			ko.Spec.LicenseModel = elem.LicenseModel
		} else {
			ko.Spec.LicenseModel = nil
		}
		if elem.ListenerEndpoint != nil {
			f44 := &svcapitypes.Endpoint{}
			if elem.ListenerEndpoint.Address != nil {
				f44.Address = elem.ListenerEndpoint.Address
			}
			if elem.ListenerEndpoint.HostedZoneId != nil {
				f44.HostedZoneID = elem.ListenerEndpoint.HostedZoneId
			}
			if elem.ListenerEndpoint.Port != nil {
				f44.Port = elem.ListenerEndpoint.Port
			}
			ko.Status.ListenerEndpoint = f44
		} else {
			ko.Status.ListenerEndpoint = nil
		}
		if elem.MasterUsername != nil {
			ko.Spec.MasterUsername = elem.MasterUsername
		} else {
			ko.Spec.MasterUsername = nil
		}
		if elem.MaxAllocatedStorage != nil {
			ko.Spec.MaxAllocatedStorage = elem.MaxAllocatedStorage
		} else {
			ko.Spec.MaxAllocatedStorage = nil
		}
		if elem.MonitoringInterval != nil {
			ko.Spec.MonitoringInterval = elem.MonitoringInterval
		} else {
			ko.Spec.MonitoringInterval = nil
		}
		if elem.MonitoringRoleArn != nil {
			ko.Spec.MonitoringRoleARN = elem.MonitoringRoleArn
		} else {
			ko.Spec.MonitoringRoleARN = nil
		}
		if elem.MultiAZ != nil {
			ko.Spec.MultiAZ = elem.MultiAZ
		} else {
			ko.Spec.MultiAZ = nil
		}
		if elem.NcharCharacterSetName != nil {
			ko.Spec.NcharCharacterSetName = elem.NcharCharacterSetName
		} else {
			ko.Spec.NcharCharacterSetName = nil
		}
		if elem.NetworkType != nil {
			ko.Spec.NetworkType = elem.NetworkType
		} else {
			ko.Spec.NetworkType = nil
		}
		if elem.OptionGroupMemberships != nil {
			f52 := []*svcapitypes.OptionGroupMembership{}
			for _, f52iter := range elem.OptionGroupMemberships {
				f52elem := &svcapitypes.OptionGroupMembership{}
				if f52iter.OptionGroupName != nil {
					f52elem.OptionGroupName = f52iter.OptionGroupName
				}
				if f52iter.Status != nil {
					f52elem.Status = f52iter.Status
				}
				f52 = append(f52, f52elem)
			}
			ko.Status.OptionGroupMemberships = f52
		} else {
			ko.Status.OptionGroupMemberships = nil
		}
		if elem.PendingModifiedValues != nil {
			f53 := &svcapitypes.PendingModifiedValues{}
			if elem.PendingModifiedValues.AllocatedStorage != nil {
				f53.AllocatedStorage = elem.PendingModifiedValues.AllocatedStorage
			}
			if elem.PendingModifiedValues.AutomationMode != nil {
				f53.AutomationMode = elem.PendingModifiedValues.AutomationMode
			}
			if elem.PendingModifiedValues.BackupRetentionPeriod != nil {
				f53.BackupRetentionPeriod = elem.PendingModifiedValues.BackupRetentionPeriod
			}
			if elem.PendingModifiedValues.CACertificateIdentifier != nil {
				f53.CACertificateIdentifier = elem.PendingModifiedValues.CACertificateIdentifier
			}
			if elem.PendingModifiedValues.DBInstanceClass != nil {
				f53.DBInstanceClass = elem.PendingModifiedValues.DBInstanceClass
			}
			if elem.PendingModifiedValues.DBInstanceIdentifier != nil {
				f53.DBInstanceIdentifier = elem.PendingModifiedValues.DBInstanceIdentifier
			}
			if elem.PendingModifiedValues.DBSubnetGroupName != nil {
				f53.DBSubnetGroupName = elem.PendingModifiedValues.DBSubnetGroupName
			}
			if elem.PendingModifiedValues.EngineVersion != nil {
				f53.EngineVersion = elem.PendingModifiedValues.EngineVersion
			}
			if elem.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
				f53.IAMDatabaseAuthenticationEnabled = elem.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
			}
			if elem.PendingModifiedValues.Iops != nil {
				f53.IOPS = elem.PendingModifiedValues.Iops
			}
			if elem.PendingModifiedValues.LicenseModel != nil {
				f53.LicenseModel = elem.PendingModifiedValues.LicenseModel
			}
			if elem.PendingModifiedValues.MasterUserPassword != nil {
				f53.MasterUserPassword = elem.PendingModifiedValues.MasterUserPassword
			}
			if elem.PendingModifiedValues.MultiAZ != nil {
				f53.MultiAZ = elem.PendingModifiedValues.MultiAZ
			}
			if elem.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
				f53f13 := &svcapitypes.PendingCloudwatchLogsExports{}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
					f53f13f0 := []*string{}
					for _, f53f13f0iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
						var f53f13f0elem string
						f53f13f0elem = *f53f13f0iter
						f53f13f0 = append(f53f13f0, &f53f13f0elem)
					}
					f53f13.LogTypesToDisable = f53f13f0
				}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
					f53f13f1 := []*string{}
					for _, f53f13f1iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
						var f53f13f1elem string
						f53f13f1elem = *f53f13f1iter
						f53f13f1 = append(f53f13f1, &f53f13f1elem)
					}
					f53f13.LogTypesToEnable = f53f13f1
				}
				f53.PendingCloudwatchLogsExports = f53f13
			}
			if elem.PendingModifiedValues.Port != nil {
				f53.Port = elem.PendingModifiedValues.Port
			}
			if elem.PendingModifiedValues.ProcessorFeatures != nil {
				f53f15 := []*svcapitypes.ProcessorFeature{}
				for _, f53f15iter := range elem.PendingModifiedValues.ProcessorFeatures {
					f53f15elem := &svcapitypes.ProcessorFeature{}
					if f53f15iter.Name != nil {
						f53f15elem.Name = f53f15iter.Name
					}
					if f53f15iter.Value != nil {
						f53f15elem.Value = f53f15iter.Value
					}
					f53f15 = append(f53f15, f53f15elem)
				}
				f53.ProcessorFeatures = f53f15
			}
			if elem.PendingModifiedValues.ResumeFullAutomationModeTime != nil {
				f53.ResumeFullAutomationModeTime = &metav1.Time{*elem.PendingModifiedValues.ResumeFullAutomationModeTime}
			}
			if elem.PendingModifiedValues.StorageType != nil {
				f53.StorageType = elem.PendingModifiedValues.StorageType
			}
			ko.Status.PendingModifiedValues = f53
		} else {
			ko.Status.PendingModifiedValues = nil
		}
		if elem.PerformanceInsightsEnabled != nil {
			ko.Spec.PerformanceInsightsEnabled = elem.PerformanceInsightsEnabled
		} else {
			ko.Spec.PerformanceInsightsEnabled = nil
		}
		if elem.PerformanceInsightsKMSKeyId != nil {
			ko.Spec.PerformanceInsightsKMSKeyID = elem.PerformanceInsightsKMSKeyId
		} else {
			ko.Spec.PerformanceInsightsKMSKeyID = nil
		}
		if elem.PerformanceInsightsRetentionPeriod != nil {
			ko.Spec.PerformanceInsightsRetentionPeriod = elem.PerformanceInsightsRetentionPeriod
		} else {
			ko.Spec.PerformanceInsightsRetentionPeriod = nil
		}
		if elem.PreferredBackupWindow != nil {
			ko.Spec.PreferredBackupWindow = elem.PreferredBackupWindow
		} else {
			ko.Spec.PreferredBackupWindow = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			ko.Spec.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			ko.Spec.PreferredMaintenanceWindow = nil
		}
		if elem.ProcessorFeatures != nil {
			f59 := []*svcapitypes.ProcessorFeature{}
			for _, f59iter := range elem.ProcessorFeatures {
				f59elem := &svcapitypes.ProcessorFeature{}
				if f59iter.Name != nil {
					f59elem.Name = f59iter.Name
				}
				if f59iter.Value != nil {
					f59elem.Value = f59iter.Value
				}
				f59 = append(f59, f59elem)
			}
			ko.Spec.ProcessorFeatures = f59
		} else {
			ko.Spec.ProcessorFeatures = nil
		}
		if elem.PromotionTier != nil {
			ko.Spec.PromotionTier = elem.PromotionTier
		} else {
			ko.Spec.PromotionTier = nil
		}
		if elem.PubliclyAccessible != nil {
			ko.Spec.PubliclyAccessible = elem.PubliclyAccessible
		} else {
			ko.Spec.PubliclyAccessible = nil
		}
		if elem.ReadReplicaDBClusterIdentifiers != nil {
			f62 := []*string{}
			for _, f62iter := range elem.ReadReplicaDBClusterIdentifiers {
				var f62elem string
				f62elem = *f62iter
				f62 = append(f62, &f62elem)
			}
			ko.Status.ReadReplicaDBClusterIdentifiers = f62
		} else {
			ko.Status.ReadReplicaDBClusterIdentifiers = nil
		}
		if elem.ReadReplicaDBInstanceIdentifiers != nil {
			f63 := []*string{}
			for _, f63iter := range elem.ReadReplicaDBInstanceIdentifiers {
				var f63elem string
				f63elem = *f63iter
				f63 = append(f63, &f63elem)
			}
			ko.Status.ReadReplicaDBInstanceIdentifiers = f63
		} else {
			ko.Status.ReadReplicaDBInstanceIdentifiers = nil
		}
		if elem.ReadReplicaSourceDBInstanceIdentifier != nil {
			ko.Status.ReadReplicaSourceDBInstanceIdentifier = elem.ReadReplicaSourceDBInstanceIdentifier
		} else {
			ko.Status.ReadReplicaSourceDBInstanceIdentifier = nil
		}
		if elem.ReplicaMode != nil {
			ko.Spec.ReplicaMode = elem.ReplicaMode
		} else {
			ko.Spec.ReplicaMode = nil
		}
		if elem.ResumeFullAutomationModeTime != nil {
			ko.Status.ResumeFullAutomationModeTime = &metav1.Time{*elem.ResumeFullAutomationModeTime}
		} else {
			ko.Status.ResumeFullAutomationModeTime = nil
		}
		if elem.SecondaryAvailabilityZone != nil {
			ko.Status.SecondaryAvailabilityZone = elem.SecondaryAvailabilityZone
		} else {
			ko.Status.SecondaryAvailabilityZone = nil
		}
		if elem.StatusInfos != nil {
			f68 := []*svcapitypes.DBInstanceStatusInfo{}
			for _, f68iter := range elem.StatusInfos {
				f68elem := &svcapitypes.DBInstanceStatusInfo{}
				if f68iter.Message != nil {
					f68elem.Message = f68iter.Message
				}
				if f68iter.Normal != nil {
					f68elem.Normal = f68iter.Normal
				}
				if f68iter.Status != nil {
					f68elem.Status = f68iter.Status
				}
				if f68iter.StatusType != nil {
					f68elem.StatusType = f68iter.StatusType
				}
				f68 = append(f68, f68elem)
			}
			ko.Status.StatusInfos = f68
		} else {
			ko.Status.StatusInfos = nil
		}
		if elem.StorageEncrypted != nil {
			ko.Spec.StorageEncrypted = elem.StorageEncrypted
		} else {
			ko.Spec.StorageEncrypted = nil
		}
		if elem.StorageType != nil {
			ko.Spec.StorageType = elem.StorageType
		} else {
			ko.Spec.StorageType = nil
		}
		if elem.TdeCredentialArn != nil {
			ko.Spec.TDECredentialARN = elem.TdeCredentialArn
		} else {
			ko.Spec.TDECredentialARN = nil
		}
		if elem.Timezone != nil {
			ko.Spec.Timezone = elem.Timezone
		} else {
			ko.Spec.Timezone = nil
		}
		if elem.VpcSecurityGroups != nil {
			f73 := []*svcapitypes.VPCSecurityGroupMembership{}
			for _, f73iter := range elem.VpcSecurityGroups {
				f73elem := &svcapitypes.VPCSecurityGroupMembership{}
				if f73iter.Status != nil {
					f73elem.Status = f73iter.Status
				}
				if f73iter.VpcSecurityGroupId != nil {
					f73elem.VPCSecurityGroupID = f73iter.VpcSecurityGroupId
				}
				f73 = append(f73, f73elem)
			}
			ko.Status.VPCSecurityGroups = f73
		} else {
			ko.Status.VPCSecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	if ko.Status.ACKResourceMetadata != nil && ko.Status.ACKResourceMetadata.ARN != nil {
		resourceARN := (*string)(ko.Status.ACKResourceMetadata.ARN)
		tags, err := rm.getTags(ctx, *resourceARN)
		if err != nil {
			return nil, err
		}
		ko.Spec.Tags = tags
	}
	if !instanceAvailable(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
	}
	if len(r.ko.Spec.VPCSecurityGroupIDs) > 0 {
		// If the desired resource has security groups specified then update the spec of the latest resource with the
		// security groups from the status. This is done so that when an instance is created without security groups
		// and gets a default security group attached to it, it is not overwritten with no security groups from the
		// desired resource.
		sgIDs := make([]*string, len(ko.Status.VPCSecurityGroups))
		for i, sg := range ko.Status.VPCSecurityGroups {
			id := *sg.VPCSecurityGroupID
			sgIDs[i] = &id
		}
		ko.Spec.VPCSecurityGroupIDs = sgIDs
	}
	if r.ko.Spec.DBParameterGroupName != nil {
		// If the desired resource has db parameter group name specified then update the spec of the latest
		// resource with the value from the status.
		if len(ko.Status.DBParameterGroups) > 0 {
			ko.Spec.DBParameterGroupName = ko.Status.DBParameterGroups[0].DBParameterGroupName
		}
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeDBInstancesInput, error) {
	res := &svcsdk.DescribeDBInstancesInput{}

	if r.ko.Spec.DBInstanceIdentifier != nil {
		res.SetDBInstanceIdentifier(*r.ko.Spec.DBInstanceIdentifier)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	// if request has DBSnapshotIdentifier spec, create request will call RestoreDBInstanceFromDBSnapshotWithContext
	// instead of normal create api
	if desired.ko.Spec.DBSnapshotIdentifier != nil {
		return rm.restoreDbInstanceFromDbSnapshot(ctx, desired)
	}
	// if request has SourceDBInstanceIdentifier spec, create request will call CreateDBInstanceReadReplicaWithContext
	// instead of normal create api
	if desired.ko.Spec.SourceDBInstanceIdentifier != nil {
		return rm.createDBInstanceReadReplica(ctx, desired)
	}

	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateDBInstanceOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDBInstanceWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDBInstance", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded != nil {
		ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded
	} else {
		ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = nil
	}
	if resp.DBInstance.ActivityStreamKinesisStreamName != nil {
		ko.Status.ActivityStreamKinesisStreamName = resp.DBInstance.ActivityStreamKinesisStreamName
	} else {
		ko.Status.ActivityStreamKinesisStreamName = nil
	}
	if resp.DBInstance.ActivityStreamKmsKeyId != nil {
		ko.Status.ActivityStreamKMSKeyID = resp.DBInstance.ActivityStreamKmsKeyId
	} else {
		ko.Status.ActivityStreamKMSKeyID = nil
	}
	if resp.DBInstance.ActivityStreamMode != nil {
		ko.Status.ActivityStreamMode = resp.DBInstance.ActivityStreamMode
	} else {
		ko.Status.ActivityStreamMode = nil
	}
	if resp.DBInstance.ActivityStreamPolicyStatus != nil {
		ko.Status.ActivityStreamPolicyStatus = resp.DBInstance.ActivityStreamPolicyStatus
	} else {
		ko.Status.ActivityStreamPolicyStatus = nil
	}
	if resp.DBInstance.ActivityStreamStatus != nil {
		ko.Status.ActivityStreamStatus = resp.DBInstance.ActivityStreamStatus
	} else {
		ko.Status.ActivityStreamStatus = nil
	}
	if resp.DBInstance.AllocatedStorage != nil {
		ko.Spec.AllocatedStorage = resp.DBInstance.AllocatedStorage
	} else {
		ko.Spec.AllocatedStorage = nil
	}
	if resp.DBInstance.AssociatedRoles != nil {
		f7 := []*svcapitypes.DBInstanceRole{}
		for _, f7iter := range resp.DBInstance.AssociatedRoles {
			f7elem := &svcapitypes.DBInstanceRole{}
			if f7iter.FeatureName != nil {
				f7elem.FeatureName = f7iter.FeatureName
			}
			if f7iter.RoleArn != nil {
				f7elem.RoleARN = f7iter.RoleArn
			}
			if f7iter.Status != nil {
				f7elem.Status = f7iter.Status
			}
			f7 = append(f7, f7elem)
		}
		ko.Status.AssociatedRoles = f7
	} else {
		ko.Status.AssociatedRoles = nil
	}
	if resp.DBInstance.AutoMinorVersionUpgrade != nil {
		ko.Spec.AutoMinorVersionUpgrade = resp.DBInstance.AutoMinorVersionUpgrade
	} else {
		ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if resp.DBInstance.AutomaticRestartTime != nil {
		ko.Status.AutomaticRestartTime = &metav1.Time{*resp.DBInstance.AutomaticRestartTime}
	} else {
		ko.Status.AutomaticRestartTime = nil
	}
	if resp.DBInstance.AutomationMode != nil {
		ko.Status.AutomationMode = resp.DBInstance.AutomationMode
	} else {
		ko.Status.AutomationMode = nil
	}
	if resp.DBInstance.AvailabilityZone != nil {
		ko.Spec.AvailabilityZone = resp.DBInstance.AvailabilityZone
	} else {
		ko.Spec.AvailabilityZone = nil
	}
	if resp.DBInstance.AwsBackupRecoveryPointArn != nil {
		ko.Status.AWSBackupRecoveryPointARN = resp.DBInstance.AwsBackupRecoveryPointArn
	} else {
		ko.Status.AWSBackupRecoveryPointARN = nil
	}
	if resp.DBInstance.BackupRetentionPeriod != nil {
		ko.Spec.BackupRetentionPeriod = resp.DBInstance.BackupRetentionPeriod
	} else {
		ko.Spec.BackupRetentionPeriod = nil
	}
	if resp.DBInstance.BackupTarget != nil {
		ko.Spec.BackupTarget = resp.DBInstance.BackupTarget
	} else {
		ko.Spec.BackupTarget = nil
	}
	if resp.DBInstance.CACertificateIdentifier != nil {
		ko.Status.CACertificateIdentifier = resp.DBInstance.CACertificateIdentifier
	} else {
		ko.Status.CACertificateIdentifier = nil
	}
	if resp.DBInstance.CharacterSetName != nil {
		ko.Spec.CharacterSetName = resp.DBInstance.CharacterSetName
	} else {
		ko.Spec.CharacterSetName = nil
	}
	if resp.DBInstance.CopyTagsToSnapshot != nil {
		ko.Spec.CopyTagsToSnapshot = resp.DBInstance.CopyTagsToSnapshot
	} else {
		ko.Spec.CopyTagsToSnapshot = nil
	}
	if resp.DBInstance.CustomIamInstanceProfile != nil {
		ko.Spec.CustomIAMInstanceProfile = resp.DBInstance.CustomIamInstanceProfile
	} else {
		ko.Spec.CustomIAMInstanceProfile = nil
	}
	if resp.DBInstance.CustomerOwnedIpEnabled != nil {
		ko.Status.CustomerOwnedIPEnabled = resp.DBInstance.CustomerOwnedIpEnabled
	} else {
		ko.Status.CustomerOwnedIPEnabled = nil
	}
	if resp.DBInstance.DBClusterIdentifier != nil {
		ko.Spec.DBClusterIdentifier = resp.DBInstance.DBClusterIdentifier
	} else {
		ko.Spec.DBClusterIdentifier = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DBInstance.DBInstanceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DBInstance.DBInstanceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DBInstance.DBInstanceAutomatedBackupsReplications != nil {
		f22 := []*svcapitypes.DBInstanceAutomatedBackupsReplication{}
		for _, f22iter := range resp.DBInstance.DBInstanceAutomatedBackupsReplications {
			f22elem := &svcapitypes.DBInstanceAutomatedBackupsReplication{}
			if f22iter.DBInstanceAutomatedBackupsArn != nil {
				f22elem.DBInstanceAutomatedBackupsARN = f22iter.DBInstanceAutomatedBackupsArn
			}
			f22 = append(f22, f22elem)
		}
		ko.Status.DBInstanceAutomatedBackupsReplications = f22
	} else {
		ko.Status.DBInstanceAutomatedBackupsReplications = nil
	}
	if resp.DBInstance.DBInstanceClass != nil {
		ko.Spec.DBInstanceClass = resp.DBInstance.DBInstanceClass
	} else {
		ko.Spec.DBInstanceClass = nil
	}
	if resp.DBInstance.DBInstanceIdentifier != nil {
		ko.Spec.DBInstanceIdentifier = resp.DBInstance.DBInstanceIdentifier
	} else {
		ko.Spec.DBInstanceIdentifier = nil
	}
	if resp.DBInstance.DBInstanceStatus != nil {
		ko.Status.DBInstanceStatus = resp.DBInstance.DBInstanceStatus
	} else {
		ko.Status.DBInstanceStatus = nil
	}
	if resp.DBInstance.DBName != nil {
		ko.Spec.DBName = resp.DBInstance.DBName
	} else {
		ko.Spec.DBName = nil
	}
	if resp.DBInstance.DBParameterGroups != nil {
		f27 := []*svcapitypes.DBParameterGroupStatus_SDK{}
		for _, f27iter := range resp.DBInstance.DBParameterGroups {
			f27elem := &svcapitypes.DBParameterGroupStatus_SDK{}
			if f27iter.DBParameterGroupName != nil {
				f27elem.DBParameterGroupName = f27iter.DBParameterGroupName
			}
			if f27iter.ParameterApplyStatus != nil {
				f27elem.ParameterApplyStatus = f27iter.ParameterApplyStatus
			}
			f27 = append(f27, f27elem)
		}
		ko.Status.DBParameterGroups = f27
	} else {
		ko.Status.DBParameterGroups = nil
	}
	if resp.DBInstance.DBSubnetGroup != nil {
		f28 := &svcapitypes.DBSubnetGroup_SDK{}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn != nil {
			f28.DBSubnetGroupARN = resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription != nil {
			f28.DBSubnetGroupDescription = resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupName != nil {
			f28.DBSubnetGroupName = resp.DBInstance.DBSubnetGroup.DBSubnetGroupName
		}
		if resp.DBInstance.DBSubnetGroup.SubnetGroupStatus != nil {
			f28.SubnetGroupStatus = resp.DBInstance.DBSubnetGroup.SubnetGroupStatus
		}
		if resp.DBInstance.DBSubnetGroup.Subnets != nil {
			f28f4 := []*svcapitypes.Subnet{}
			for _, f28f4iter := range resp.DBInstance.DBSubnetGroup.Subnets {
				f28f4elem := &svcapitypes.Subnet{}
				if f28f4iter.SubnetAvailabilityZone != nil {
					f28f4elemf0 := &svcapitypes.AvailabilityZone{}
					if f28f4iter.SubnetAvailabilityZone.Name != nil {
						f28f4elemf0.Name = f28f4iter.SubnetAvailabilityZone.Name
					}
					f28f4elem.SubnetAvailabilityZone = f28f4elemf0
				}
				if f28f4iter.SubnetIdentifier != nil {
					f28f4elem.SubnetIdentifier = f28f4iter.SubnetIdentifier
				}
				if f28f4iter.SubnetOutpost != nil {
					f28f4elemf2 := &svcapitypes.Outpost{}
					if f28f4iter.SubnetOutpost.Arn != nil {
						f28f4elemf2.ARN = f28f4iter.SubnetOutpost.Arn
					}
					f28f4elem.SubnetOutpost = f28f4elemf2
				}
				if f28f4iter.SubnetStatus != nil {
					f28f4elem.SubnetStatus = f28f4iter.SubnetStatus
				}
				f28f4 = append(f28f4, f28f4elem)
			}
			f28.Subnets = f28f4
		}
		if resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes != nil {
			f28f5 := []*string{}
			for _, f28f5iter := range resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes {
				var f28f5elem string
				f28f5elem = *f28f5iter
				f28f5 = append(f28f5, &f28f5elem)
			}
			f28.SupportedNetworkTypes = f28f5
		}
		if resp.DBInstance.DBSubnetGroup.VpcId != nil {
			f28.VPCID = resp.DBInstance.DBSubnetGroup.VpcId
		}
		ko.Status.DBSubnetGroup = f28
	} else {
		ko.Status.DBSubnetGroup = nil
	}
	if resp.DBInstance.DbInstancePort != nil {
		ko.Status.DBInstancePort = resp.DBInstance.DbInstancePort
	} else {
		ko.Status.DBInstancePort = nil
	}
	if resp.DBInstance.DbiResourceId != nil {
		ko.Status.DBIResourceID = resp.DBInstance.DbiResourceId
	} else {
		ko.Status.DBIResourceID = nil
	}
	if resp.DBInstance.DeletionProtection != nil {
		ko.Spec.DeletionProtection = resp.DBInstance.DeletionProtection
	} else {
		ko.Spec.DeletionProtection = nil
	}
	if resp.DBInstance.DomainMemberships != nil {
		f32 := []*svcapitypes.DomainMembership{}
		for _, f32iter := range resp.DBInstance.DomainMemberships {
			f32elem := &svcapitypes.DomainMembership{}
			if f32iter.Domain != nil {
				f32elem.Domain = f32iter.Domain
			}
			if f32iter.FQDN != nil {
				f32elem.FQDN = f32iter.FQDN
			}
			if f32iter.IAMRoleName != nil {
				f32elem.IAMRoleName = f32iter.IAMRoleName
			}
			if f32iter.Status != nil {
				f32elem.Status = f32iter.Status
			}
			f32 = append(f32, f32elem)
		}
		ko.Status.DomainMemberships = f32
	} else {
		ko.Status.DomainMemberships = nil
	}
	if resp.DBInstance.EnabledCloudwatchLogsExports != nil {
		f33 := []*string{}
		for _, f33iter := range resp.DBInstance.EnabledCloudwatchLogsExports {
			var f33elem string
			f33elem = *f33iter
			f33 = append(f33, &f33elem)
		}
		ko.Status.EnabledCloudwatchLogsExports = f33
	} else {
		ko.Status.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBInstance.Endpoint != nil {
		f34 := &svcapitypes.Endpoint{}
		if resp.DBInstance.Endpoint.Address != nil {
			f34.Address = resp.DBInstance.Endpoint.Address
		}
		if resp.DBInstance.Endpoint.HostedZoneId != nil {
			f34.HostedZoneID = resp.DBInstance.Endpoint.HostedZoneId
		}
		if resp.DBInstance.Endpoint.Port != nil {
			f34.Port = resp.DBInstance.Endpoint.Port
		}
		ko.Status.Endpoint = f34
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DBInstance.Engine != nil {
		ko.Spec.Engine = resp.DBInstance.Engine
	} else {
		ko.Spec.Engine = nil
	}
	if resp.DBInstance.EngineVersion != nil {
		ko.Spec.EngineVersion = resp.DBInstance.EngineVersion
	} else {
		ko.Spec.EngineVersion = nil
	}
	if resp.DBInstance.EnhancedMonitoringResourceArn != nil {
		ko.Status.EnhancedMonitoringResourceARN = resp.DBInstance.EnhancedMonitoringResourceArn
	} else {
		ko.Status.EnhancedMonitoringResourceARN = nil
	}
	if resp.DBInstance.IAMDatabaseAuthenticationEnabled != nil {
		ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBInstance.IAMDatabaseAuthenticationEnabled
	} else {
		ko.Status.IAMDatabaseAuthenticationEnabled = nil
	}
	if resp.DBInstance.InstanceCreateTime != nil {
		ko.Status.InstanceCreateTime = &metav1.Time{*resp.DBInstance.InstanceCreateTime}
	} else {
		ko.Status.InstanceCreateTime = nil
	}
	if resp.DBInstance.Iops != nil {
		ko.Spec.IOPS = resp.DBInstance.Iops
	} else {
		ko.Spec.IOPS = nil
	}
	if resp.DBInstance.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.DBInstance.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.DBInstance.LatestRestorableTime != nil {
		ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBInstance.LatestRestorableTime}
	} else {
		ko.Status.LatestRestorableTime = nil
	}
	if resp.DBInstance.LicenseModel != nil {
		ko.Spec.LicenseModel = resp.DBInstance.LicenseModel
	} else {
		ko.Spec.LicenseModel = nil
	}
	if resp.DBInstance.ListenerEndpoint != nil {
		f44 := &svcapitypes.Endpoint{}
		if resp.DBInstance.ListenerEndpoint.Address != nil {
			f44.Address = resp.DBInstance.ListenerEndpoint.Address
		}
		if resp.DBInstance.ListenerEndpoint.HostedZoneId != nil {
			f44.HostedZoneID = resp.DBInstance.ListenerEndpoint.HostedZoneId
		}
		if resp.DBInstance.ListenerEndpoint.Port != nil {
			f44.Port = resp.DBInstance.ListenerEndpoint.Port
		}
		ko.Status.ListenerEndpoint = f44
	} else {
		ko.Status.ListenerEndpoint = nil
	}
	if resp.DBInstance.MasterUsername != nil {
		ko.Spec.MasterUsername = resp.DBInstance.MasterUsername
	} else {
		ko.Spec.MasterUsername = nil
	}
	if resp.DBInstance.MaxAllocatedStorage != nil {
		ko.Spec.MaxAllocatedStorage = resp.DBInstance.MaxAllocatedStorage
	} else {
		ko.Spec.MaxAllocatedStorage = nil
	}
	if resp.DBInstance.MonitoringInterval != nil {
		ko.Spec.MonitoringInterval = resp.DBInstance.MonitoringInterval
	} else {
		ko.Spec.MonitoringInterval = nil
	}
	if resp.DBInstance.MonitoringRoleArn != nil {
		ko.Spec.MonitoringRoleARN = resp.DBInstance.MonitoringRoleArn
	} else {
		ko.Spec.MonitoringRoleARN = nil
	}
	if resp.DBInstance.MultiAZ != nil {
		ko.Spec.MultiAZ = resp.DBInstance.MultiAZ
	} else {
		ko.Spec.MultiAZ = nil
	}
	if resp.DBInstance.NcharCharacterSetName != nil {
		ko.Spec.NcharCharacterSetName = resp.DBInstance.NcharCharacterSetName
	} else {
		ko.Spec.NcharCharacterSetName = nil
	}
	if resp.DBInstance.NetworkType != nil {
		ko.Spec.NetworkType = resp.DBInstance.NetworkType
	} else {
		ko.Spec.NetworkType = nil
	}
	if resp.DBInstance.OptionGroupMemberships != nil {
		f52 := []*svcapitypes.OptionGroupMembership{}
		for _, f52iter := range resp.DBInstance.OptionGroupMemberships {
			f52elem := &svcapitypes.OptionGroupMembership{}
			if f52iter.OptionGroupName != nil {
				f52elem.OptionGroupName = f52iter.OptionGroupName
			}
			if f52iter.Status != nil {
				f52elem.Status = f52iter.Status
			}
			f52 = append(f52, f52elem)
		}
		ko.Status.OptionGroupMemberships = f52
	} else {
		ko.Status.OptionGroupMemberships = nil
	}
	if resp.DBInstance.PendingModifiedValues != nil {
		f53 := &svcapitypes.PendingModifiedValues{}
		if resp.DBInstance.PendingModifiedValues.AllocatedStorage != nil {
			f53.AllocatedStorage = resp.DBInstance.PendingModifiedValues.AllocatedStorage
		}
		if resp.DBInstance.PendingModifiedValues.AutomationMode != nil {
			f53.AutomationMode = resp.DBInstance.PendingModifiedValues.AutomationMode
		}
		if resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod != nil {
			f53.BackupRetentionPeriod = resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod
		}
		if resp.DBInstance.PendingModifiedValues.CACertificateIdentifier != nil {
			f53.CACertificateIdentifier = resp.DBInstance.PendingModifiedValues.CACertificateIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceClass != nil {
			f53.DBInstanceClass = resp.DBInstance.PendingModifiedValues.DBInstanceClass
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier != nil {
			f53.DBInstanceIdentifier = resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBSubnetGroupName != nil {
			f53.DBSubnetGroupName = resp.DBInstance.PendingModifiedValues.DBSubnetGroupName
		}
		if resp.DBInstance.PendingModifiedValues.EngineVersion != nil {
			f53.EngineVersion = resp.DBInstance.PendingModifiedValues.EngineVersion
		}
		if resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
			f53.IAMDatabaseAuthenticationEnabled = resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
		}
		if resp.DBInstance.PendingModifiedValues.Iops != nil {
			f53.IOPS = resp.DBInstance.PendingModifiedValues.Iops
		}
		if resp.DBInstance.PendingModifiedValues.LicenseModel != nil {
			f53.LicenseModel = resp.DBInstance.PendingModifiedValues.LicenseModel
		}
		if resp.DBInstance.PendingModifiedValues.MasterUserPassword != nil {
			f53.MasterUserPassword = resp.DBInstance.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBInstance.PendingModifiedValues.MultiAZ != nil {
			f53.MultiAZ = resp.DBInstance.PendingModifiedValues.MultiAZ
		}
		if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f53f13 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f53f13f0 := []*string{}
				for _, f53f13f0iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
					var f53f13f0elem string
					f53f13f0elem = *f53f13f0iter
					f53f13f0 = append(f53f13f0, &f53f13f0elem)
				}
				f53f13.LogTypesToDisable = f53f13f0
			}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f53f13f1 := []*string{}
				for _, f53f13f1iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
					var f53f13f1elem string
					f53f13f1elem = *f53f13f1iter
					f53f13f1 = append(f53f13f1, &f53f13f1elem)
				}
				f53f13.LogTypesToEnable = f53f13f1
			}
			f53.PendingCloudwatchLogsExports = f53f13
		}
		if resp.DBInstance.PendingModifiedValues.Port != nil {
			f53.Port = resp.DBInstance.PendingModifiedValues.Port
		}
		if resp.DBInstance.PendingModifiedValues.ProcessorFeatures != nil {
			f53f15 := []*svcapitypes.ProcessorFeature{}
			for _, f53f15iter := range resp.DBInstance.PendingModifiedValues.ProcessorFeatures {
				f53f15elem := &svcapitypes.ProcessorFeature{}
				if f53f15iter.Name != nil {
					f53f15elem.Name = f53f15iter.Name
				}
				if f53f15iter.Value != nil {
					f53f15elem.Value = f53f15iter.Value
				}
				f53f15 = append(f53f15, f53f15elem)
			}
			f53.ProcessorFeatures = f53f15
		}
		if resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime != nil {
			f53.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime}
		}
		if resp.DBInstance.PendingModifiedValues.StorageType != nil {
			f53.StorageType = resp.DBInstance.PendingModifiedValues.StorageType
		}
		ko.Status.PendingModifiedValues = f53
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.DBInstance.PerformanceInsightsEnabled != nil {
		ko.Spec.PerformanceInsightsEnabled = resp.DBInstance.PerformanceInsightsEnabled
	} else {
		ko.Spec.PerformanceInsightsEnabled = nil
	}
	if resp.DBInstance.PerformanceInsightsKMSKeyId != nil {
		ko.Spec.PerformanceInsightsKMSKeyID = resp.DBInstance.PerformanceInsightsKMSKeyId
	} else {
		ko.Spec.PerformanceInsightsKMSKeyID = nil
	}
	if resp.DBInstance.PerformanceInsightsRetentionPeriod != nil {
		ko.Spec.PerformanceInsightsRetentionPeriod = resp.DBInstance.PerformanceInsightsRetentionPeriod
	} else {
		ko.Spec.PerformanceInsightsRetentionPeriod = nil
	}
	if resp.DBInstance.PreferredBackupWindow != nil {
		ko.Spec.PreferredBackupWindow = resp.DBInstance.PreferredBackupWindow
	} else {
		ko.Spec.PreferredBackupWindow = nil
	}
	if resp.DBInstance.PreferredMaintenanceWindow != nil {
		ko.Spec.PreferredMaintenanceWindow = resp.DBInstance.PreferredMaintenanceWindow
	} else {
		ko.Spec.PreferredMaintenanceWindow = nil
	}
	if resp.DBInstance.ProcessorFeatures != nil {
		f59 := []*svcapitypes.ProcessorFeature{}
		for _, f59iter := range resp.DBInstance.ProcessorFeatures {
			f59elem := &svcapitypes.ProcessorFeature{}
			if f59iter.Name != nil {
				f59elem.Name = f59iter.Name
			}
			if f59iter.Value != nil {
				f59elem.Value = f59iter.Value
			}
			f59 = append(f59, f59elem)
		}
		ko.Spec.ProcessorFeatures = f59
	} else {
		ko.Spec.ProcessorFeatures = nil
	}
	if resp.DBInstance.PromotionTier != nil {
		ko.Spec.PromotionTier = resp.DBInstance.PromotionTier
	} else {
		ko.Spec.PromotionTier = nil
	}
	if resp.DBInstance.PubliclyAccessible != nil {
		ko.Spec.PubliclyAccessible = resp.DBInstance.PubliclyAccessible
	} else {
		ko.Spec.PubliclyAccessible = nil
	}
	if resp.DBInstance.ReadReplicaDBClusterIdentifiers != nil {
		f62 := []*string{}
		for _, f62iter := range resp.DBInstance.ReadReplicaDBClusterIdentifiers {
			var f62elem string
			f62elem = *f62iter
			f62 = append(f62, &f62elem)
		}
		ko.Status.ReadReplicaDBClusterIdentifiers = f62
	} else {
		ko.Status.ReadReplicaDBClusterIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaDBInstanceIdentifiers != nil {
		f63 := []*string{}
		for _, f63iter := range resp.DBInstance.ReadReplicaDBInstanceIdentifiers {
			var f63elem string
			f63elem = *f63iter
			f63 = append(f63, &f63elem)
		}
		ko.Status.ReadReplicaDBInstanceIdentifiers = f63
	} else {
		ko.Status.ReadReplicaDBInstanceIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier != nil {
		ko.Status.ReadReplicaSourceDBInstanceIdentifier = resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier
	} else {
		ko.Status.ReadReplicaSourceDBInstanceIdentifier = nil
	}
	if resp.DBInstance.ReplicaMode != nil {
		ko.Spec.ReplicaMode = resp.DBInstance.ReplicaMode
	} else {
		ko.Spec.ReplicaMode = nil
	}
	if resp.DBInstance.ResumeFullAutomationModeTime != nil {
		ko.Status.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.ResumeFullAutomationModeTime}
	} else {
		ko.Status.ResumeFullAutomationModeTime = nil
	}
	if resp.DBInstance.SecondaryAvailabilityZone != nil {
		ko.Status.SecondaryAvailabilityZone = resp.DBInstance.SecondaryAvailabilityZone
	} else {
		ko.Status.SecondaryAvailabilityZone = nil
	}
	if resp.DBInstance.StatusInfos != nil {
		f68 := []*svcapitypes.DBInstanceStatusInfo{}
		for _, f68iter := range resp.DBInstance.StatusInfos {
			f68elem := &svcapitypes.DBInstanceStatusInfo{}
			if f68iter.Message != nil {
				f68elem.Message = f68iter.Message
			}
			if f68iter.Normal != nil {
				f68elem.Normal = f68iter.Normal
			}
			if f68iter.Status != nil {
				f68elem.Status = f68iter.Status
			}
			if f68iter.StatusType != nil {
				f68elem.StatusType = f68iter.StatusType
			}
			f68 = append(f68, f68elem)
		}
		ko.Status.StatusInfos = f68
	} else {
		ko.Status.StatusInfos = nil
	}
	if resp.DBInstance.StorageEncrypted != nil {
		ko.Spec.StorageEncrypted = resp.DBInstance.StorageEncrypted
	} else {
		ko.Spec.StorageEncrypted = nil
	}
	if resp.DBInstance.StorageType != nil {
		ko.Spec.StorageType = resp.DBInstance.StorageType
	} else {
		ko.Spec.StorageType = nil
	}
	if resp.DBInstance.TdeCredentialArn != nil {
		ko.Spec.TDECredentialARN = resp.DBInstance.TdeCredentialArn
	} else {
		ko.Spec.TDECredentialARN = nil
	}
	if resp.DBInstance.Timezone != nil {
		ko.Spec.Timezone = resp.DBInstance.Timezone
	} else {
		ko.Spec.Timezone = nil
	}
	if resp.DBInstance.VpcSecurityGroups != nil {
		f73 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f73iter := range resp.DBInstance.VpcSecurityGroups {
			f73elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f73iter.Status != nil {
				f73elem.Status = f73iter.Status
			}
			if f73iter.VpcSecurityGroupId != nil {
				f73elem.VPCSecurityGroupID = f73iter.VpcSecurityGroupId
			}
			f73 = append(f73, f73elem)
		}
		ko.Status.VPCSecurityGroups = f73
	} else {
		ko.Status.VPCSecurityGroups = nil
	}

	rm.setStatusDefaults(ko)
	// We expect the DB instance to be in 'creating' status since we just
	// issued the call to create it, but I suppose it doesn't hurt to check
	// here.
	if instanceCreating(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
		return &resource{ko}, nil
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDBInstanceInput, error) {
	res := &svcsdk.CreateDBInstanceInput{}

	if r.ko.Spec.AllocatedStorage != nil {
		res.SetAllocatedStorage(*r.ko.Spec.AllocatedStorage)
	}
	if r.ko.Spec.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*r.ko.Spec.AutoMinorVersionUpgrade)
	}
	if r.ko.Spec.AvailabilityZone != nil {
		res.SetAvailabilityZone(*r.ko.Spec.AvailabilityZone)
	}
	if r.ko.Spec.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*r.ko.Spec.BackupRetentionPeriod)
	}
	if r.ko.Spec.BackupTarget != nil {
		res.SetBackupTarget(*r.ko.Spec.BackupTarget)
	}
	if r.ko.Spec.CharacterSetName != nil {
		res.SetCharacterSetName(*r.ko.Spec.CharacterSetName)
	}
	if r.ko.Spec.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*r.ko.Spec.CopyTagsToSnapshot)
	}
	if r.ko.Spec.CustomIAMInstanceProfile != nil {
		res.SetCustomIamInstanceProfile(*r.ko.Spec.CustomIAMInstanceProfile)
	}
	if r.ko.Spec.DBClusterIdentifier != nil {
		res.SetDBClusterIdentifier(*r.ko.Spec.DBClusterIdentifier)
	}
	if r.ko.Spec.DBInstanceClass != nil {
		res.SetDBInstanceClass(*r.ko.Spec.DBInstanceClass)
	}
	if r.ko.Spec.DBInstanceIdentifier != nil {
		res.SetDBInstanceIdentifier(*r.ko.Spec.DBInstanceIdentifier)
	}
	if r.ko.Spec.DBName != nil {
		res.SetDBName(*r.ko.Spec.DBName)
	}
	if r.ko.Spec.DBParameterGroupName != nil {
		res.SetDBParameterGroupName(*r.ko.Spec.DBParameterGroupName)
	}
	if r.ko.Spec.DBSubnetGroupName != nil {
		res.SetDBSubnetGroupName(*r.ko.Spec.DBSubnetGroupName)
	}
	if r.ko.Spec.DeletionProtection != nil {
		res.SetDeletionProtection(*r.ko.Spec.DeletionProtection)
	}
	if r.ko.Spec.Domain != nil {
		res.SetDomain(*r.ko.Spec.Domain)
	}
	if r.ko.Spec.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*r.ko.Spec.DomainIAMRoleName)
	}
	if r.ko.Spec.EnableCloudwatchLogsExports != nil {
		f17 := []*string{}
		for _, f17iter := range r.ko.Spec.EnableCloudwatchLogsExports {
			var f17elem string
			f17elem = *f17iter
			f17 = append(f17, &f17elem)
		}
		res.SetEnableCloudwatchLogsExports(f17)
	}
	if r.ko.Spec.EnableCustomerOwnedIP != nil {
		res.SetEnableCustomerOwnedIp(*r.ko.Spec.EnableCustomerOwnedIP)
	}
	if r.ko.Spec.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*r.ko.Spec.EnableIAMDatabaseAuthentication)
	}
	if r.ko.Spec.PerformanceInsightsEnabled != nil {
		res.SetEnablePerformanceInsights(*r.ko.Spec.PerformanceInsightsEnabled)
	}
	if r.ko.Spec.Engine != nil {
		res.SetEngine(*r.ko.Spec.Engine)
	}
	if r.ko.Spec.EngineVersion != nil {
		res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	}
	if r.ko.Spec.IOPS != nil {
		res.SetIops(*r.ko.Spec.IOPS)
	}
	if r.ko.Spec.KMSKeyID != nil {
		res.SetKmsKeyId(*r.ko.Spec.KMSKeyID)
	}
	if r.ko.Spec.LicenseModel != nil {
		res.SetLicenseModel(*r.ko.Spec.LicenseModel)
	}
	if r.ko.Spec.MasterUserPassword != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.MasterUserPassword)
		if err != nil {
			return nil, ackrequeue.Needed(err)
		}
		if tmpSecret != "" {
			res.SetMasterUserPassword(tmpSecret)
		}
	}
	if r.ko.Spec.MasterUsername != nil {
		res.SetMasterUsername(*r.ko.Spec.MasterUsername)
	}
	if r.ko.Spec.MaxAllocatedStorage != nil {
		res.SetMaxAllocatedStorage(*r.ko.Spec.MaxAllocatedStorage)
	}
	if r.ko.Spec.MonitoringInterval != nil {
		res.SetMonitoringInterval(*r.ko.Spec.MonitoringInterval)
	}
	if r.ko.Spec.MonitoringRoleARN != nil {
		res.SetMonitoringRoleArn(*r.ko.Spec.MonitoringRoleARN)
	}
	if r.ko.Spec.MultiAZ != nil {
		res.SetMultiAZ(*r.ko.Spec.MultiAZ)
	}
	if r.ko.Spec.NcharCharacterSetName != nil {
		res.SetNcharCharacterSetName(*r.ko.Spec.NcharCharacterSetName)
	}
	if r.ko.Spec.NetworkType != nil {
		res.SetNetworkType(*r.ko.Spec.NetworkType)
	}
	if r.ko.Spec.OptionGroupName != nil {
		res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)
	}
	if r.ko.Spec.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*r.ko.Spec.PerformanceInsightsKMSKeyID)
	}
	if r.ko.Spec.PerformanceInsightsRetentionPeriod != nil {
		res.SetPerformanceInsightsRetentionPeriod(*r.ko.Spec.PerformanceInsightsRetentionPeriod)
	}
	if r.ko.Spec.Port != nil {
		res.SetPort(*r.ko.Spec.Port)
	}
	if r.ko.Spec.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*r.ko.Spec.PreferredBackupWindow)
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	}
	if r.ko.Spec.ProcessorFeatures != nil {
		f40 := []*svcsdk.ProcessorFeature{}
		for _, f40iter := range r.ko.Spec.ProcessorFeatures {
			f40elem := &svcsdk.ProcessorFeature{}
			if f40iter.Name != nil {
				f40elem.SetName(*f40iter.Name)
			}
			if f40iter.Value != nil {
				f40elem.SetValue(*f40iter.Value)
			}
			f40 = append(f40, f40elem)
		}
		res.SetProcessorFeatures(f40)
	}
	if r.ko.Spec.PromotionTier != nil {
		res.SetPromotionTier(*r.ko.Spec.PromotionTier)
	}
	if r.ko.Spec.PubliclyAccessible != nil {
		res.SetPubliclyAccessible(*r.ko.Spec.PubliclyAccessible)
	}
	if r.ko.Spec.StorageEncrypted != nil {
		res.SetStorageEncrypted(*r.ko.Spec.StorageEncrypted)
	}
	if r.ko.Spec.StorageType != nil {
		res.SetStorageType(*r.ko.Spec.StorageType)
	}
	if r.ko.Spec.Tags != nil {
		f45 := []*svcsdk.Tag{}
		for _, f45iter := range r.ko.Spec.Tags {
			f45elem := &svcsdk.Tag{}
			if f45iter.Key != nil {
				f45elem.SetKey(*f45iter.Key)
			}
			if f45iter.Value != nil {
				f45elem.SetValue(*f45iter.Value)
			}
			f45 = append(f45, f45elem)
		}
		res.SetTags(f45)
	}
	if r.ko.Spec.TDECredentialARN != nil {
		res.SetTdeCredentialArn(*r.ko.Spec.TDECredentialARN)
	}
	if r.ko.Spec.TDECredentialPassword != nil {
		res.SetTdeCredentialPassword(*r.ko.Spec.TDECredentialPassword)
	}
	if r.ko.Spec.Timezone != nil {
		res.SetTimezone(*r.ko.Spec.Timezone)
	}
	if r.ko.Spec.VPCSecurityGroupIDs != nil {
		f49 := []*string{}
		for _, f49iter := range r.ko.Spec.VPCSecurityGroupIDs {
			var f49elem string
			f49elem = *f49iter
			f49 = append(f49, &f49elem)
		}
		res.SetVpcSecurityGroupIds(f49)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if immutableFieldChanges := rm.getImmutableFieldChanges(delta); len(immutableFieldChanges) > 0 {
		msg := fmt.Sprintf("Immutable Spec fields have been modified: %s", strings.Join(immutableFieldChanges, ","))
		return nil, ackerr.NewTerminalError(fmt.Errorf(msg))
	}
	if instanceDeleting(latest) {
		msg := "DB instance is currently being deleted"
		ackcondition.SetSynced(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitWhileDeleting
	}
	if instanceCreating(latest) {
		msg := "DB instance is currently being created"
		ackcondition.SetSynced(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitUntilCanModify(latest)
	}
	if instanceHasTerminalStatus(latest) {
		msg := "DB instance is in '" + *latest.ko.Status.DBInstanceStatus + "' status"
		ackcondition.SetTerminal(desired, corev1.ConditionTrue, &msg, nil)
		ackcondition.SetSynced(desired, corev1.ConditionTrue, nil, nil)
		return desired, nil
	}
	if !instanceAvailable(latest) {
		msg := "DB instance cannot be modifed while in '" + *latest.ko.Status.DBInstanceStatus + "' status"
		ackcondition.SetSynced(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitUntilCanModify(latest)
	}
	if delta.DifferentAt("Spec.Tags") {
		if err = rm.syncTags(ctx, desired, latest); err != nil {
			return nil, err
		}
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	// ModifyDBInstance call will return ValidationError when the
	// ModifyDBInstanceRequest contains the same DBSubnetGroupName
	// as the DBInstance. So, if there is no delta between
	// desired and latest for Spec.DBSubnetGroupName, exclude it
	// from ModifyDBInstanceRequest
	if !delta.DifferentAt("Spec.DBSubnetGroupName") {
		input.DBSubnetGroupName = nil
	}

	// RDS will not compare diff value and accept any modify db call
	// for below values, MonitoringInterval, CACertificateIdentifier
	// and user master password, NetworkType
	// hence if there is no delta between desired
	// and latest, exclude it from ModifyDBInstanceRequest
	if !delta.DifferentAt("Spec.MonitoringInterval") {
		input.MonitoringInterval = nil
	}
	if !delta.DifferentAt("Spec.CACertificateIdentifier") {
		input.CACertificateIdentifier = nil
	}
	if !delta.DifferentAt("Spec.MasterUserPassword.Name") {
		input.MasterUserPassword = nil
	}
	if !delta.DifferentAt("Spec.NetworkType") {
		input.NetworkType = nil
	}

	// For dbInstance inside dbCluster, it's either aurora or
	// multi-az cluster case, in either case, the below params
	// are not controlled in instance level.
	// hence when DBClusterIdentifier appear, set them to nil
	// Please refer to doc : https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_DeleteDBInstance.html
	if desired.ko.Spec.DBClusterIdentifier != nil {
		input.AllocatedStorage = nil
		input.BackupRetentionPeriod = nil
		input.PreferredBackupWindow = nil
		input.DeletionProtection = nil
	}

	var resp *svcsdk.ModifyDBInstanceOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyDBInstanceWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyDBInstance", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded != nil {
		ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded
	} else {
		ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = nil
	}
	if resp.DBInstance.ActivityStreamKinesisStreamName != nil {
		ko.Status.ActivityStreamKinesisStreamName = resp.DBInstance.ActivityStreamKinesisStreamName
	} else {
		ko.Status.ActivityStreamKinesisStreamName = nil
	}
	if resp.DBInstance.ActivityStreamKmsKeyId != nil {
		ko.Status.ActivityStreamKMSKeyID = resp.DBInstance.ActivityStreamKmsKeyId
	} else {
		ko.Status.ActivityStreamKMSKeyID = nil
	}
	if resp.DBInstance.ActivityStreamMode != nil {
		ko.Status.ActivityStreamMode = resp.DBInstance.ActivityStreamMode
	} else {
		ko.Status.ActivityStreamMode = nil
	}
	if resp.DBInstance.ActivityStreamPolicyStatus != nil {
		ko.Status.ActivityStreamPolicyStatus = resp.DBInstance.ActivityStreamPolicyStatus
	} else {
		ko.Status.ActivityStreamPolicyStatus = nil
	}
	if resp.DBInstance.ActivityStreamStatus != nil {
		ko.Status.ActivityStreamStatus = resp.DBInstance.ActivityStreamStatus
	} else {
		ko.Status.ActivityStreamStatus = nil
	}
	if resp.DBInstance.AllocatedStorage != nil {
		ko.Spec.AllocatedStorage = resp.DBInstance.AllocatedStorage
	} else {
		ko.Spec.AllocatedStorage = nil
	}
	if resp.DBInstance.AssociatedRoles != nil {
		f7 := []*svcapitypes.DBInstanceRole{}
		for _, f7iter := range resp.DBInstance.AssociatedRoles {
			f7elem := &svcapitypes.DBInstanceRole{}
			if f7iter.FeatureName != nil {
				f7elem.FeatureName = f7iter.FeatureName
			}
			if f7iter.RoleArn != nil {
				f7elem.RoleARN = f7iter.RoleArn
			}
			if f7iter.Status != nil {
				f7elem.Status = f7iter.Status
			}
			f7 = append(f7, f7elem)
		}
		ko.Status.AssociatedRoles = f7
	} else {
		ko.Status.AssociatedRoles = nil
	}
	if resp.DBInstance.AutoMinorVersionUpgrade != nil {
		ko.Spec.AutoMinorVersionUpgrade = resp.DBInstance.AutoMinorVersionUpgrade
	} else {
		ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if resp.DBInstance.AutomaticRestartTime != nil {
		ko.Status.AutomaticRestartTime = &metav1.Time{*resp.DBInstance.AutomaticRestartTime}
	} else {
		ko.Status.AutomaticRestartTime = nil
	}
	if resp.DBInstance.AutomationMode != nil {
		ko.Status.AutomationMode = resp.DBInstance.AutomationMode
	} else {
		ko.Status.AutomationMode = nil
	}
	if resp.DBInstance.AvailabilityZone != nil {
		ko.Spec.AvailabilityZone = resp.DBInstance.AvailabilityZone
	} else {
		ko.Spec.AvailabilityZone = nil
	}
	if resp.DBInstance.AwsBackupRecoveryPointArn != nil {
		ko.Status.AWSBackupRecoveryPointARN = resp.DBInstance.AwsBackupRecoveryPointArn
	} else {
		ko.Status.AWSBackupRecoveryPointARN = nil
	}
	if resp.DBInstance.BackupRetentionPeriod != nil {
		ko.Spec.BackupRetentionPeriod = resp.DBInstance.BackupRetentionPeriod
	} else {
		ko.Spec.BackupRetentionPeriod = nil
	}
	if resp.DBInstance.BackupTarget != nil {
		ko.Spec.BackupTarget = resp.DBInstance.BackupTarget
	} else {
		ko.Spec.BackupTarget = nil
	}
	if resp.DBInstance.CACertificateIdentifier != nil {
		ko.Status.CACertificateIdentifier = resp.DBInstance.CACertificateIdentifier
	} else {
		ko.Status.CACertificateIdentifier = nil
	}
	if resp.DBInstance.CharacterSetName != nil {
		ko.Spec.CharacterSetName = resp.DBInstance.CharacterSetName
	} else {
		ko.Spec.CharacterSetName = nil
	}
	if resp.DBInstance.CopyTagsToSnapshot != nil {
		ko.Spec.CopyTagsToSnapshot = resp.DBInstance.CopyTagsToSnapshot
	} else {
		ko.Spec.CopyTagsToSnapshot = nil
	}
	if resp.DBInstance.CustomIamInstanceProfile != nil {
		ko.Spec.CustomIAMInstanceProfile = resp.DBInstance.CustomIamInstanceProfile
	} else {
		ko.Spec.CustomIAMInstanceProfile = nil
	}
	if resp.DBInstance.CustomerOwnedIpEnabled != nil {
		ko.Status.CustomerOwnedIPEnabled = resp.DBInstance.CustomerOwnedIpEnabled
	} else {
		ko.Status.CustomerOwnedIPEnabled = nil
	}
	if resp.DBInstance.DBClusterIdentifier != nil {
		ko.Spec.DBClusterIdentifier = resp.DBInstance.DBClusterIdentifier
	} else {
		ko.Spec.DBClusterIdentifier = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DBInstance.DBInstanceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DBInstance.DBInstanceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DBInstance.DBInstanceAutomatedBackupsReplications != nil {
		f22 := []*svcapitypes.DBInstanceAutomatedBackupsReplication{}
		for _, f22iter := range resp.DBInstance.DBInstanceAutomatedBackupsReplications {
			f22elem := &svcapitypes.DBInstanceAutomatedBackupsReplication{}
			if f22iter.DBInstanceAutomatedBackupsArn != nil {
				f22elem.DBInstanceAutomatedBackupsARN = f22iter.DBInstanceAutomatedBackupsArn
			}
			f22 = append(f22, f22elem)
		}
		ko.Status.DBInstanceAutomatedBackupsReplications = f22
	} else {
		ko.Status.DBInstanceAutomatedBackupsReplications = nil
	}
	if resp.DBInstance.DBInstanceClass != nil {
		ko.Spec.DBInstanceClass = resp.DBInstance.DBInstanceClass
	} else {
		ko.Spec.DBInstanceClass = nil
	}
	if resp.DBInstance.DBInstanceIdentifier != nil {
		ko.Spec.DBInstanceIdentifier = resp.DBInstance.DBInstanceIdentifier
	} else {
		ko.Spec.DBInstanceIdentifier = nil
	}
	if resp.DBInstance.DBInstanceStatus != nil {
		ko.Status.DBInstanceStatus = resp.DBInstance.DBInstanceStatus
	} else {
		ko.Status.DBInstanceStatus = nil
	}
	if resp.DBInstance.DBName != nil {
		ko.Spec.DBName = resp.DBInstance.DBName
	} else {
		ko.Spec.DBName = nil
	}
	if resp.DBInstance.DBParameterGroups != nil {
		f27 := []*svcapitypes.DBParameterGroupStatus_SDK{}
		for _, f27iter := range resp.DBInstance.DBParameterGroups {
			f27elem := &svcapitypes.DBParameterGroupStatus_SDK{}
			if f27iter.DBParameterGroupName != nil {
				f27elem.DBParameterGroupName = f27iter.DBParameterGroupName
			}
			if f27iter.ParameterApplyStatus != nil {
				f27elem.ParameterApplyStatus = f27iter.ParameterApplyStatus
			}
			f27 = append(f27, f27elem)
		}
		ko.Status.DBParameterGroups = f27
	} else {
		ko.Status.DBParameterGroups = nil
	}
	if resp.DBInstance.DBSubnetGroup != nil {
		f28 := &svcapitypes.DBSubnetGroup_SDK{}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn != nil {
			f28.DBSubnetGroupARN = resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription != nil {
			f28.DBSubnetGroupDescription = resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupName != nil {
			f28.DBSubnetGroupName = resp.DBInstance.DBSubnetGroup.DBSubnetGroupName
		}
		if resp.DBInstance.DBSubnetGroup.SubnetGroupStatus != nil {
			f28.SubnetGroupStatus = resp.DBInstance.DBSubnetGroup.SubnetGroupStatus
		}
		if resp.DBInstance.DBSubnetGroup.Subnets != nil {
			f28f4 := []*svcapitypes.Subnet{}
			for _, f28f4iter := range resp.DBInstance.DBSubnetGroup.Subnets {
				f28f4elem := &svcapitypes.Subnet{}
				if f28f4iter.SubnetAvailabilityZone != nil {
					f28f4elemf0 := &svcapitypes.AvailabilityZone{}
					if f28f4iter.SubnetAvailabilityZone.Name != nil {
						f28f4elemf0.Name = f28f4iter.SubnetAvailabilityZone.Name
					}
					f28f4elem.SubnetAvailabilityZone = f28f4elemf0
				}
				if f28f4iter.SubnetIdentifier != nil {
					f28f4elem.SubnetIdentifier = f28f4iter.SubnetIdentifier
				}
				if f28f4iter.SubnetOutpost != nil {
					f28f4elemf2 := &svcapitypes.Outpost{}
					if f28f4iter.SubnetOutpost.Arn != nil {
						f28f4elemf2.ARN = f28f4iter.SubnetOutpost.Arn
					}
					f28f4elem.SubnetOutpost = f28f4elemf2
				}
				if f28f4iter.SubnetStatus != nil {
					f28f4elem.SubnetStatus = f28f4iter.SubnetStatus
				}
				f28f4 = append(f28f4, f28f4elem)
			}
			f28.Subnets = f28f4
		}
		if resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes != nil {
			f28f5 := []*string{}
			for _, f28f5iter := range resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes {
				var f28f5elem string
				f28f5elem = *f28f5iter
				f28f5 = append(f28f5, &f28f5elem)
			}
			f28.SupportedNetworkTypes = f28f5
		}
		if resp.DBInstance.DBSubnetGroup.VpcId != nil {
			f28.VPCID = resp.DBInstance.DBSubnetGroup.VpcId
		}
		ko.Status.DBSubnetGroup = f28
	} else {
		ko.Status.DBSubnetGroup = nil
	}
	if resp.DBInstance.DbInstancePort != nil {
		ko.Status.DBInstancePort = resp.DBInstance.DbInstancePort
	} else {
		ko.Status.DBInstancePort = nil
	}
	if resp.DBInstance.DbiResourceId != nil {
		ko.Status.DBIResourceID = resp.DBInstance.DbiResourceId
	} else {
		ko.Status.DBIResourceID = nil
	}
	if resp.DBInstance.DeletionProtection != nil {
		ko.Spec.DeletionProtection = resp.DBInstance.DeletionProtection
	} else {
		ko.Spec.DeletionProtection = nil
	}
	if resp.DBInstance.DomainMemberships != nil {
		f32 := []*svcapitypes.DomainMembership{}
		for _, f32iter := range resp.DBInstance.DomainMemberships {
			f32elem := &svcapitypes.DomainMembership{}
			if f32iter.Domain != nil {
				f32elem.Domain = f32iter.Domain
			}
			if f32iter.FQDN != nil {
				f32elem.FQDN = f32iter.FQDN
			}
			if f32iter.IAMRoleName != nil {
				f32elem.IAMRoleName = f32iter.IAMRoleName
			}
			if f32iter.Status != nil {
				f32elem.Status = f32iter.Status
			}
			f32 = append(f32, f32elem)
		}
		ko.Status.DomainMemberships = f32
	} else {
		ko.Status.DomainMemberships = nil
	}
	if resp.DBInstance.EnabledCloudwatchLogsExports != nil {
		f33 := []*string{}
		for _, f33iter := range resp.DBInstance.EnabledCloudwatchLogsExports {
			var f33elem string
			f33elem = *f33iter
			f33 = append(f33, &f33elem)
		}
		ko.Status.EnabledCloudwatchLogsExports = f33
	} else {
		ko.Status.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBInstance.Endpoint != nil {
		f34 := &svcapitypes.Endpoint{}
		if resp.DBInstance.Endpoint.Address != nil {
			f34.Address = resp.DBInstance.Endpoint.Address
		}
		if resp.DBInstance.Endpoint.HostedZoneId != nil {
			f34.HostedZoneID = resp.DBInstance.Endpoint.HostedZoneId
		}
		if resp.DBInstance.Endpoint.Port != nil {
			f34.Port = resp.DBInstance.Endpoint.Port
		}
		ko.Status.Endpoint = f34
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DBInstance.Engine != nil {
		ko.Spec.Engine = resp.DBInstance.Engine
	} else {
		ko.Spec.Engine = nil
	}
	if resp.DBInstance.EngineVersion != nil {
		ko.Spec.EngineVersion = resp.DBInstance.EngineVersion
	} else {
		ko.Spec.EngineVersion = nil
	}
	if resp.DBInstance.EnhancedMonitoringResourceArn != nil {
		ko.Status.EnhancedMonitoringResourceARN = resp.DBInstance.EnhancedMonitoringResourceArn
	} else {
		ko.Status.EnhancedMonitoringResourceARN = nil
	}
	if resp.DBInstance.IAMDatabaseAuthenticationEnabled != nil {
		ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBInstance.IAMDatabaseAuthenticationEnabled
	} else {
		ko.Status.IAMDatabaseAuthenticationEnabled = nil
	}
	if resp.DBInstance.InstanceCreateTime != nil {
		ko.Status.InstanceCreateTime = &metav1.Time{*resp.DBInstance.InstanceCreateTime}
	} else {
		ko.Status.InstanceCreateTime = nil
	}
	if resp.DBInstance.Iops != nil {
		ko.Spec.IOPS = resp.DBInstance.Iops
	} else {
		ko.Spec.IOPS = nil
	}
	if resp.DBInstance.KmsKeyId != nil {
		ko.Spec.KMSKeyID = resp.DBInstance.KmsKeyId
	} else {
		ko.Spec.KMSKeyID = nil
	}
	if resp.DBInstance.LatestRestorableTime != nil {
		ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBInstance.LatestRestorableTime}
	} else {
		ko.Status.LatestRestorableTime = nil
	}
	if resp.DBInstance.LicenseModel != nil {
		ko.Spec.LicenseModel = resp.DBInstance.LicenseModel
	} else {
		ko.Spec.LicenseModel = nil
	}
	if resp.DBInstance.ListenerEndpoint != nil {
		f44 := &svcapitypes.Endpoint{}
		if resp.DBInstance.ListenerEndpoint.Address != nil {
			f44.Address = resp.DBInstance.ListenerEndpoint.Address
		}
		if resp.DBInstance.ListenerEndpoint.HostedZoneId != nil {
			f44.HostedZoneID = resp.DBInstance.ListenerEndpoint.HostedZoneId
		}
		if resp.DBInstance.ListenerEndpoint.Port != nil {
			f44.Port = resp.DBInstance.ListenerEndpoint.Port
		}
		ko.Status.ListenerEndpoint = f44
	} else {
		ko.Status.ListenerEndpoint = nil
	}
	if resp.DBInstance.MasterUsername != nil {
		ko.Spec.MasterUsername = resp.DBInstance.MasterUsername
	} else {
		ko.Spec.MasterUsername = nil
	}
	if resp.DBInstance.MaxAllocatedStorage != nil {
		ko.Spec.MaxAllocatedStorage = resp.DBInstance.MaxAllocatedStorage
	} else {
		ko.Spec.MaxAllocatedStorage = nil
	}
	if resp.DBInstance.MonitoringInterval != nil {
		ko.Spec.MonitoringInterval = resp.DBInstance.MonitoringInterval
	} else {
		ko.Spec.MonitoringInterval = nil
	}
	if resp.DBInstance.MonitoringRoleArn != nil {
		ko.Spec.MonitoringRoleARN = resp.DBInstance.MonitoringRoleArn
	} else {
		ko.Spec.MonitoringRoleARN = nil
	}
	if resp.DBInstance.MultiAZ != nil {
		ko.Spec.MultiAZ = resp.DBInstance.MultiAZ
	} else {
		ko.Spec.MultiAZ = nil
	}
	if resp.DBInstance.NcharCharacterSetName != nil {
		ko.Spec.NcharCharacterSetName = resp.DBInstance.NcharCharacterSetName
	} else {
		ko.Spec.NcharCharacterSetName = nil
	}
	if resp.DBInstance.NetworkType != nil {
		ko.Spec.NetworkType = resp.DBInstance.NetworkType
	} else {
		ko.Spec.NetworkType = nil
	}
	if resp.DBInstance.OptionGroupMemberships != nil {
		f52 := []*svcapitypes.OptionGroupMembership{}
		for _, f52iter := range resp.DBInstance.OptionGroupMemberships {
			f52elem := &svcapitypes.OptionGroupMembership{}
			if f52iter.OptionGroupName != nil {
				f52elem.OptionGroupName = f52iter.OptionGroupName
			}
			if f52iter.Status != nil {
				f52elem.Status = f52iter.Status
			}
			f52 = append(f52, f52elem)
		}
		ko.Status.OptionGroupMemberships = f52
	} else {
		ko.Status.OptionGroupMemberships = nil
	}
	if resp.DBInstance.PendingModifiedValues != nil {
		f53 := &svcapitypes.PendingModifiedValues{}
		if resp.DBInstance.PendingModifiedValues.AllocatedStorage != nil {
			f53.AllocatedStorage = resp.DBInstance.PendingModifiedValues.AllocatedStorage
		}
		if resp.DBInstance.PendingModifiedValues.AutomationMode != nil {
			f53.AutomationMode = resp.DBInstance.PendingModifiedValues.AutomationMode
		}
		if resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod != nil {
			f53.BackupRetentionPeriod = resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod
		}
		if resp.DBInstance.PendingModifiedValues.CACertificateIdentifier != nil {
			f53.CACertificateIdentifier = resp.DBInstance.PendingModifiedValues.CACertificateIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceClass != nil {
			f53.DBInstanceClass = resp.DBInstance.PendingModifiedValues.DBInstanceClass
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier != nil {
			f53.DBInstanceIdentifier = resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBSubnetGroupName != nil {
			f53.DBSubnetGroupName = resp.DBInstance.PendingModifiedValues.DBSubnetGroupName
		}
		if resp.DBInstance.PendingModifiedValues.EngineVersion != nil {
			f53.EngineVersion = resp.DBInstance.PendingModifiedValues.EngineVersion
		}
		if resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
			f53.IAMDatabaseAuthenticationEnabled = resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
		}
		if resp.DBInstance.PendingModifiedValues.Iops != nil {
			f53.IOPS = resp.DBInstance.PendingModifiedValues.Iops
		}
		if resp.DBInstance.PendingModifiedValues.LicenseModel != nil {
			f53.LicenseModel = resp.DBInstance.PendingModifiedValues.LicenseModel
		}
		if resp.DBInstance.PendingModifiedValues.MasterUserPassword != nil {
			f53.MasterUserPassword = resp.DBInstance.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBInstance.PendingModifiedValues.MultiAZ != nil {
			f53.MultiAZ = resp.DBInstance.PendingModifiedValues.MultiAZ
		}
		if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f53f13 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f53f13f0 := []*string{}
				for _, f53f13f0iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
					var f53f13f0elem string
					f53f13f0elem = *f53f13f0iter
					f53f13f0 = append(f53f13f0, &f53f13f0elem)
				}
				f53f13.LogTypesToDisable = f53f13f0
			}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f53f13f1 := []*string{}
				for _, f53f13f1iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
					var f53f13f1elem string
					f53f13f1elem = *f53f13f1iter
					f53f13f1 = append(f53f13f1, &f53f13f1elem)
				}
				f53f13.LogTypesToEnable = f53f13f1
			}
			f53.PendingCloudwatchLogsExports = f53f13
		}
		if resp.DBInstance.PendingModifiedValues.Port != nil {
			f53.Port = resp.DBInstance.PendingModifiedValues.Port
		}
		if resp.DBInstance.PendingModifiedValues.ProcessorFeatures != nil {
			f53f15 := []*svcapitypes.ProcessorFeature{}
			for _, f53f15iter := range resp.DBInstance.PendingModifiedValues.ProcessorFeatures {
				f53f15elem := &svcapitypes.ProcessorFeature{}
				if f53f15iter.Name != nil {
					f53f15elem.Name = f53f15iter.Name
				}
				if f53f15iter.Value != nil {
					f53f15elem.Value = f53f15iter.Value
				}
				f53f15 = append(f53f15, f53f15elem)
			}
			f53.ProcessorFeatures = f53f15
		}
		if resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime != nil {
			f53.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime}
		}
		if resp.DBInstance.PendingModifiedValues.StorageType != nil {
			f53.StorageType = resp.DBInstance.PendingModifiedValues.StorageType
		}
		ko.Status.PendingModifiedValues = f53
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.DBInstance.PerformanceInsightsEnabled != nil {
		ko.Spec.PerformanceInsightsEnabled = resp.DBInstance.PerformanceInsightsEnabled
	} else {
		ko.Spec.PerformanceInsightsEnabled = nil
	}
	if resp.DBInstance.PerformanceInsightsKMSKeyId != nil {
		ko.Spec.PerformanceInsightsKMSKeyID = resp.DBInstance.PerformanceInsightsKMSKeyId
	} else {
		ko.Spec.PerformanceInsightsKMSKeyID = nil
	}
	if resp.DBInstance.PerformanceInsightsRetentionPeriod != nil {
		ko.Spec.PerformanceInsightsRetentionPeriod = resp.DBInstance.PerformanceInsightsRetentionPeriod
	} else {
		ko.Spec.PerformanceInsightsRetentionPeriod = nil
	}
	if resp.DBInstance.PreferredBackupWindow != nil {
		ko.Spec.PreferredBackupWindow = resp.DBInstance.PreferredBackupWindow
	} else {
		ko.Spec.PreferredBackupWindow = nil
	}
	if resp.DBInstance.PreferredMaintenanceWindow != nil {
		ko.Spec.PreferredMaintenanceWindow = resp.DBInstance.PreferredMaintenanceWindow
	} else {
		ko.Spec.PreferredMaintenanceWindow = nil
	}
	if resp.DBInstance.ProcessorFeatures != nil {
		f59 := []*svcapitypes.ProcessorFeature{}
		for _, f59iter := range resp.DBInstance.ProcessorFeatures {
			f59elem := &svcapitypes.ProcessorFeature{}
			if f59iter.Name != nil {
				f59elem.Name = f59iter.Name
			}
			if f59iter.Value != nil {
				f59elem.Value = f59iter.Value
			}
			f59 = append(f59, f59elem)
		}
		ko.Spec.ProcessorFeatures = f59
	} else {
		ko.Spec.ProcessorFeatures = nil
	}
	if resp.DBInstance.PromotionTier != nil {
		ko.Spec.PromotionTier = resp.DBInstance.PromotionTier
	} else {
		ko.Spec.PromotionTier = nil
	}
	if resp.DBInstance.PubliclyAccessible != nil {
		ko.Spec.PubliclyAccessible = resp.DBInstance.PubliclyAccessible
	} else {
		ko.Spec.PubliclyAccessible = nil
	}
	if resp.DBInstance.ReadReplicaDBClusterIdentifiers != nil {
		f62 := []*string{}
		for _, f62iter := range resp.DBInstance.ReadReplicaDBClusterIdentifiers {
			var f62elem string
			f62elem = *f62iter
			f62 = append(f62, &f62elem)
		}
		ko.Status.ReadReplicaDBClusterIdentifiers = f62
	} else {
		ko.Status.ReadReplicaDBClusterIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaDBInstanceIdentifiers != nil {
		f63 := []*string{}
		for _, f63iter := range resp.DBInstance.ReadReplicaDBInstanceIdentifiers {
			var f63elem string
			f63elem = *f63iter
			f63 = append(f63, &f63elem)
		}
		ko.Status.ReadReplicaDBInstanceIdentifiers = f63
	} else {
		ko.Status.ReadReplicaDBInstanceIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier != nil {
		ko.Status.ReadReplicaSourceDBInstanceIdentifier = resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier
	} else {
		ko.Status.ReadReplicaSourceDBInstanceIdentifier = nil
	}
	if resp.DBInstance.ReplicaMode != nil {
		ko.Spec.ReplicaMode = resp.DBInstance.ReplicaMode
	} else {
		ko.Spec.ReplicaMode = nil
	}
	if resp.DBInstance.ResumeFullAutomationModeTime != nil {
		ko.Status.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.ResumeFullAutomationModeTime}
	} else {
		ko.Status.ResumeFullAutomationModeTime = nil
	}
	if resp.DBInstance.SecondaryAvailabilityZone != nil {
		ko.Status.SecondaryAvailabilityZone = resp.DBInstance.SecondaryAvailabilityZone
	} else {
		ko.Status.SecondaryAvailabilityZone = nil
	}
	if resp.DBInstance.StatusInfos != nil {
		f68 := []*svcapitypes.DBInstanceStatusInfo{}
		for _, f68iter := range resp.DBInstance.StatusInfos {
			f68elem := &svcapitypes.DBInstanceStatusInfo{}
			if f68iter.Message != nil {
				f68elem.Message = f68iter.Message
			}
			if f68iter.Normal != nil {
				f68elem.Normal = f68iter.Normal
			}
			if f68iter.Status != nil {
				f68elem.Status = f68iter.Status
			}
			if f68iter.StatusType != nil {
				f68elem.StatusType = f68iter.StatusType
			}
			f68 = append(f68, f68elem)
		}
		ko.Status.StatusInfos = f68
	} else {
		ko.Status.StatusInfos = nil
	}
	if resp.DBInstance.StorageEncrypted != nil {
		ko.Spec.StorageEncrypted = resp.DBInstance.StorageEncrypted
	} else {
		ko.Spec.StorageEncrypted = nil
	}
	if resp.DBInstance.StorageType != nil {
		ko.Spec.StorageType = resp.DBInstance.StorageType
	} else {
		ko.Spec.StorageType = nil
	}
	if resp.DBInstance.TdeCredentialArn != nil {
		ko.Spec.TDECredentialARN = resp.DBInstance.TdeCredentialArn
	} else {
		ko.Spec.TDECredentialARN = nil
	}
	if resp.DBInstance.Timezone != nil {
		ko.Spec.Timezone = resp.DBInstance.Timezone
	} else {
		ko.Spec.Timezone = nil
	}
	if resp.DBInstance.VpcSecurityGroups != nil {
		f73 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f73iter := range resp.DBInstance.VpcSecurityGroups {
			f73elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f73iter.Status != nil {
				f73elem.Status = f73iter.Status
			}
			if f73iter.VpcSecurityGroupId != nil {
				f73elem.VPCSecurityGroupID = f73iter.VpcSecurityGroupId
			}
			f73 = append(f73, f73elem)
		}
		ko.Status.VPCSecurityGroups = f73
	} else {
		ko.Status.VPCSecurityGroups = nil
	}

	rm.setStatusDefaults(ko)
	// When ModifyDBInstance API is successful, it asynchronously
	// updates the DBInstanceStatus. Requeue to find the current
	// DBInstance status and set Synced condition accordingly
	if err == nil {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
	}
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.ModifyDBInstanceInput, error) {
	res := &svcsdk.ModifyDBInstanceInput{}

	if r.ko.Spec.AllocatedStorage != nil {
		res.SetAllocatedStorage(*r.ko.Spec.AllocatedStorage)
	}
	res.SetAllowMajorVersionUpgrade(true)
	res.SetApplyImmediately(true)
	if r.ko.Spec.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*r.ko.Spec.AutoMinorVersionUpgrade)
	}
	if r.ko.Status.AutomationMode != nil {
		res.SetAutomationMode(*r.ko.Status.AutomationMode)
	}
	if r.ko.Status.AWSBackupRecoveryPointARN != nil {
		res.SetAwsBackupRecoveryPointArn(*r.ko.Status.AWSBackupRecoveryPointARN)
	}
	if r.ko.Spec.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*r.ko.Spec.BackupRetentionPeriod)
	}
	if r.ko.Status.CACertificateIdentifier != nil {
		res.SetCACertificateIdentifier(*r.ko.Status.CACertificateIdentifier)
	}
	if r.ko.Spec.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*r.ko.Spec.CopyTagsToSnapshot)
	}
	if r.ko.Spec.DBInstanceClass != nil {
		res.SetDBInstanceClass(*r.ko.Spec.DBInstanceClass)
	}
	if r.ko.Spec.DBInstanceIdentifier != nil {
		res.SetDBInstanceIdentifier(*r.ko.Spec.DBInstanceIdentifier)
	}
	if r.ko.Spec.DBParameterGroupName != nil {
		res.SetDBParameterGroupName(*r.ko.Spec.DBParameterGroupName)
	}
	if r.ko.Spec.DBSubnetGroupName != nil {
		res.SetDBSubnetGroupName(*r.ko.Spec.DBSubnetGroupName)
	}
	if r.ko.Spec.DeletionProtection != nil {
		res.SetDeletionProtection(*r.ko.Spec.DeletionProtection)
	}
	if r.ko.Spec.Domain != nil {
		res.SetDomain(*r.ko.Spec.Domain)
	}
	if r.ko.Spec.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*r.ko.Spec.DomainIAMRoleName)
	}
	if r.ko.Spec.EnableCustomerOwnedIP != nil {
		res.SetEnableCustomerOwnedIp(*r.ko.Spec.EnableCustomerOwnedIP)
	}
	if r.ko.Spec.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*r.ko.Spec.EnableIAMDatabaseAuthentication)
	}
	if r.ko.Spec.PerformanceInsightsEnabled != nil {
		res.SetEnablePerformanceInsights(*r.ko.Spec.PerformanceInsightsEnabled)
	}
	if r.ko.Spec.EngineVersion != nil {
		res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	}
	if r.ko.Spec.IOPS != nil {
		res.SetIops(*r.ko.Spec.IOPS)
	}
	if r.ko.Spec.LicenseModel != nil {
		res.SetLicenseModel(*r.ko.Spec.LicenseModel)
	}
	if r.ko.Spec.MasterUserPassword != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.MasterUserPassword)
		if err != nil {
			return nil, ackrequeue.Needed(err)
		}
		if tmpSecret != "" {
			res.SetMasterUserPassword(tmpSecret)
		}
	}
	if r.ko.Spec.MaxAllocatedStorage != nil {
		res.SetMaxAllocatedStorage(*r.ko.Spec.MaxAllocatedStorage)
	}
	if r.ko.Spec.MonitoringInterval != nil {
		res.SetMonitoringInterval(*r.ko.Spec.MonitoringInterval)
	}
	if r.ko.Spec.MonitoringRoleARN != nil {
		res.SetMonitoringRoleArn(*r.ko.Spec.MonitoringRoleARN)
	}
	if r.ko.Spec.MultiAZ != nil {
		res.SetMultiAZ(*r.ko.Spec.MultiAZ)
	}
	if r.ko.Spec.NetworkType != nil {
		res.SetNetworkType(*r.ko.Spec.NetworkType)
	}
	if r.ko.Spec.OptionGroupName != nil {
		res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)
	}
	if r.ko.Spec.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*r.ko.Spec.PerformanceInsightsKMSKeyID)
	}
	if r.ko.Spec.PerformanceInsightsRetentionPeriod != nil {
		res.SetPerformanceInsightsRetentionPeriod(*r.ko.Spec.PerformanceInsightsRetentionPeriod)
	}
	if r.ko.Spec.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*r.ko.Spec.PreferredBackupWindow)
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	}
	if r.ko.Spec.ProcessorFeatures != nil {
		f38 := []*svcsdk.ProcessorFeature{}
		for _, f38iter := range r.ko.Spec.ProcessorFeatures {
			f38elem := &svcsdk.ProcessorFeature{}
			if f38iter.Name != nil {
				f38elem.SetName(*f38iter.Name)
			}
			if f38iter.Value != nil {
				f38elem.SetValue(*f38iter.Value)
			}
			f38 = append(f38, f38elem)
		}
		res.SetProcessorFeatures(f38)
	}
	if r.ko.Spec.PromotionTier != nil {
		res.SetPromotionTier(*r.ko.Spec.PromotionTier)
	}
	if r.ko.Spec.PubliclyAccessible != nil {
		res.SetPubliclyAccessible(*r.ko.Spec.PubliclyAccessible)
	}
	if r.ko.Spec.ReplicaMode != nil {
		res.SetReplicaMode(*r.ko.Spec.ReplicaMode)
	}
	if r.ko.Spec.StorageType != nil {
		res.SetStorageType(*r.ko.Spec.StorageType)
	}
	if r.ko.Spec.TDECredentialARN != nil {
		res.SetTdeCredentialArn(*r.ko.Spec.TDECredentialARN)
	}
	if r.ko.Spec.TDECredentialPassword != nil {
		res.SetTdeCredentialPassword(*r.ko.Spec.TDECredentialPassword)
	}
	if r.ko.Spec.UseDefaultProcessorFeatures != nil {
		res.SetUseDefaultProcessorFeatures(*r.ko.Spec.UseDefaultProcessorFeatures)
	}
	if r.ko.Spec.VPCSecurityGroupIDs != nil {
		f47 := []*string{}
		for _, f47iter := range r.ko.Spec.VPCSecurityGroupIDs {
			var f47elem string
			f47elem = *f47iter
			f47 = append(f47, &f47elem)
		}
		res.SetVpcSecurityGroupIds(f47)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if instanceDeleting(r) {
		return r, requeueWaitWhileDeleting
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteDBInstanceOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteDBInstanceWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDBInstance", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDBInstanceInput, error) {
	res := &svcsdk.DeleteDBInstanceInput{}

	if r.ko.Spec.DBInstanceIdentifier != nil {
		res.SetDBInstanceIdentifier(*r.ko.Spec.DBInstanceIdentifier)
	}
	res.SetSkipFinalSnapshot(true)

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.DBInstance,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidParameter",
		"InvalidParameterValue",
		"InvalidParameterCombination":
		return true
	default:
		return false
	}
}

// getImmutableFieldChanges returns list of immutable fields from the
func (rm *resourceManager) getImmutableFieldChanges(
	delta *ackcompare.Delta,
) []string {
	var fields []string
	if delta.DifferentAt("Spec.AvailabilityZone") {
		fields = append(fields, "AvailabilityZone")
	}

	return fields
}

// newRestoreDBInstanceFromDBSnapshotInput returns a RestoreDBInstanceFromDBSnapshotInput object
// with each the field set by the corresponding configuration's fields.
func (rm *resourceManager) newRestoreDBInstanceFromDBSnapshotInput(
	r *resource,
) *svcsdk.RestoreDBInstanceFromDBSnapshotInput {
	res := &svcsdk.RestoreDBInstanceFromDBSnapshotInput{}

	if r.ko.Spec.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*r.ko.Spec.AutoMinorVersionUpgrade)
	}
	if r.ko.Spec.AvailabilityZone != nil {
		res.SetAvailabilityZone(*r.ko.Spec.AvailabilityZone)
	}
	if r.ko.Spec.BackupTarget != nil {
		res.SetBackupTarget(*r.ko.Spec.BackupTarget)
	}
	if r.ko.Spec.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*r.ko.Spec.CopyTagsToSnapshot)
	}
	if r.ko.Spec.CustomIAMInstanceProfile != nil {
		res.SetCustomIamInstanceProfile(*r.ko.Spec.CustomIAMInstanceProfile)
	}
	if r.ko.Spec.DBInstanceClass != nil {
		res.SetDBInstanceClass(*r.ko.Spec.DBInstanceClass)
	}
	if r.ko.Spec.DBInstanceIdentifier != nil {
		res.SetDBInstanceIdentifier(*r.ko.Spec.DBInstanceIdentifier)
	}
	if r.ko.Spec.DBName != nil {
		res.SetDBName(*r.ko.Spec.DBName)
	}
	if r.ko.Spec.DBParameterGroupName != nil {
		res.SetDBParameterGroupName(*r.ko.Spec.DBParameterGroupName)
	}
	if r.ko.Spec.DBSnapshotIdentifier != nil {
		res.SetDBSnapshotIdentifier(*r.ko.Spec.DBSnapshotIdentifier)
	}
	if r.ko.Spec.DBSubnetGroupName != nil {
		res.SetDBSubnetGroupName(*r.ko.Spec.DBSubnetGroupName)
	}
	if r.ko.Spec.DeletionProtection != nil {
		res.SetDeletionProtection(*r.ko.Spec.DeletionProtection)
	}
	if r.ko.Spec.Domain != nil {
		res.SetDomain(*r.ko.Spec.Domain)
	}
	if r.ko.Spec.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*r.ko.Spec.DomainIAMRoleName)
	}
	if r.ko.Spec.EnableCloudwatchLogsExports != nil {
		resf14 := []*string{}
		for _, resf14iter := range r.ko.Spec.EnableCloudwatchLogsExports {
			var resf14elem string
			resf14elem = *resf14iter
			resf14 = append(resf14, &resf14elem)
		}
		res.SetEnableCloudwatchLogsExports(resf14)
	}
	if r.ko.Spec.EnableCustomerOwnedIP != nil {
		res.SetEnableCustomerOwnedIp(*r.ko.Spec.EnableCustomerOwnedIP)
	}
	if r.ko.Spec.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*r.ko.Spec.EnableIAMDatabaseAuthentication)
	}
	if r.ko.Spec.Engine != nil {
		res.SetEngine(*r.ko.Spec.Engine)
	}
	if r.ko.Spec.IOPS != nil {
		res.SetIops(*r.ko.Spec.IOPS)
	}
	if r.ko.Spec.LicenseModel != nil {
		res.SetLicenseModel(*r.ko.Spec.LicenseModel)
	}
	if r.ko.Spec.MultiAZ != nil {
		res.SetMultiAZ(*r.ko.Spec.MultiAZ)
	}
	if r.ko.Spec.NetworkType != nil {
		res.SetNetworkType(*r.ko.Spec.NetworkType)
	}
	if r.ko.Spec.OptionGroupName != nil {
		res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)
	}
	if r.ko.Spec.Port != nil {
		res.SetPort(*r.ko.Spec.Port)
	}
	if r.ko.Spec.ProcessorFeatures != nil {
		resf24 := []*svcsdk.ProcessorFeature{}
		for _, resf24iter := range r.ko.Spec.ProcessorFeatures {
			resf24elem := &svcsdk.ProcessorFeature{}
			if resf24iter.Name != nil {
				resf24elem.SetName(*resf24iter.Name)
			}
			if resf24iter.Value != nil {
				resf24elem.SetValue(*resf24iter.Value)
			}
			resf24 = append(resf24, resf24elem)
		}
		res.SetProcessorFeatures(resf24)
	}
	if r.ko.Spec.PubliclyAccessible != nil {
		res.SetPubliclyAccessible(*r.ko.Spec.PubliclyAccessible)
	}
	if r.ko.Spec.StorageType != nil {
		res.SetStorageType(*r.ko.Spec.StorageType)
	}
	if r.ko.Spec.Tags != nil {
		resf27 := []*svcsdk.Tag{}
		for _, resf27iter := range r.ko.Spec.Tags {
			resf27elem := &svcsdk.Tag{}
			if resf27iter.Key != nil {
				resf27elem.SetKey(*resf27iter.Key)
			}
			if resf27iter.Value != nil {
				resf27elem.SetValue(*resf27iter.Value)
			}
			resf27 = append(resf27, resf27elem)
		}
		res.SetTags(resf27)
	}
	if r.ko.Spec.TDECredentialARN != nil {
		res.SetTdeCredentialArn(*r.ko.Spec.TDECredentialARN)
	}
	if r.ko.Spec.TDECredentialPassword != nil {
		res.SetTdeCredentialPassword(*r.ko.Spec.TDECredentialPassword)
	}
	if r.ko.Spec.UseDefaultProcessorFeatures != nil {
		res.SetUseDefaultProcessorFeatures(*r.ko.Spec.UseDefaultProcessorFeatures)
	}
	if r.ko.Spec.VPCSecurityGroupIDs != nil {
		resf31 := []*string{}
		for _, resf31iter := range r.ko.Spec.VPCSecurityGroupIDs {
			var resf31elem string
			resf31elem = *resf31iter
			resf31 = append(resf31, &resf31elem)
		}
		res.SetVpcSecurityGroupIds(resf31)
	}

	return res
}

// setResourceFromRestoreDBInstanceFromDBSnapshotOutput sets a resource RestoreDBInstanceFromDBSnapshotOutput type
// given the SDK type.
func (rm *resourceManager) setResourceFromRestoreDBInstanceFromDBSnapshotOutput(
	r *resource,
	resp *svcsdk.RestoreDBInstanceFromDBSnapshotOutput,
) {

	if resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded != nil {
		r.ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded
	} else {
		r.ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = nil
	}
	if resp.DBInstance.ActivityStreamKinesisStreamName != nil {
		r.ko.Status.ActivityStreamKinesisStreamName = resp.DBInstance.ActivityStreamKinesisStreamName
	} else {
		r.ko.Status.ActivityStreamKinesisStreamName = nil
	}
	if resp.DBInstance.ActivityStreamKmsKeyId != nil {
		r.ko.Status.ActivityStreamKMSKeyID = resp.DBInstance.ActivityStreamKmsKeyId
	} else {
		r.ko.Status.ActivityStreamKMSKeyID = nil
	}
	if resp.DBInstance.ActivityStreamMode != nil {
		r.ko.Status.ActivityStreamMode = resp.DBInstance.ActivityStreamMode
	} else {
		r.ko.Status.ActivityStreamMode = nil
	}
	if resp.DBInstance.ActivityStreamPolicyStatus != nil {
		r.ko.Status.ActivityStreamPolicyStatus = resp.DBInstance.ActivityStreamPolicyStatus
	} else {
		r.ko.Status.ActivityStreamPolicyStatus = nil
	}
	if resp.DBInstance.ActivityStreamStatus != nil {
		r.ko.Status.ActivityStreamStatus = resp.DBInstance.ActivityStreamStatus
	} else {
		r.ko.Status.ActivityStreamStatus = nil
	}
	if resp.DBInstance.AllocatedStorage != nil {
		r.ko.Spec.AllocatedStorage = resp.DBInstance.AllocatedStorage
	} else {
		r.ko.Spec.AllocatedStorage = nil
	}
	if resp.DBInstance.AssociatedRoles != nil {
		f7 := []*svcapitypes.DBInstanceRole{}
		for _, f7iter := range resp.DBInstance.AssociatedRoles {
			f7elem := &svcapitypes.DBInstanceRole{}
			if f7iter.FeatureName != nil {
				f7elem.FeatureName = f7iter.FeatureName
			}
			if f7iter.RoleArn != nil {
				f7elem.RoleARN = f7iter.RoleArn
			}
			if f7iter.Status != nil {
				f7elem.Status = f7iter.Status
			}
			f7 = append(f7, f7elem)
		}
		r.ko.Status.AssociatedRoles = f7
	} else {
		r.ko.Status.AssociatedRoles = nil
	}
	if resp.DBInstance.AutoMinorVersionUpgrade != nil {
		r.ko.Spec.AutoMinorVersionUpgrade = resp.DBInstance.AutoMinorVersionUpgrade
	} else {
		r.ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if resp.DBInstance.AutomaticRestartTime != nil {
		r.ko.Status.AutomaticRestartTime = &metav1.Time{*resp.DBInstance.AutomaticRestartTime}
	} else {
		r.ko.Status.AutomaticRestartTime = nil
	}
	if resp.DBInstance.AutomationMode != nil {
		r.ko.Status.AutomationMode = resp.DBInstance.AutomationMode
	} else {
		r.ko.Status.AutomationMode = nil
	}
	if resp.DBInstance.AvailabilityZone != nil {
		r.ko.Spec.AvailabilityZone = resp.DBInstance.AvailabilityZone
	} else {
		r.ko.Spec.AvailabilityZone = nil
	}
	if resp.DBInstance.AwsBackupRecoveryPointArn != nil {
		r.ko.Status.AWSBackupRecoveryPointARN = resp.DBInstance.AwsBackupRecoveryPointArn
	} else {
		r.ko.Status.AWSBackupRecoveryPointARN = nil
	}
	if resp.DBInstance.BackupRetentionPeriod != nil {
		r.ko.Spec.BackupRetentionPeriod = resp.DBInstance.BackupRetentionPeriod
	} else {
		r.ko.Spec.BackupRetentionPeriod = nil
	}
	if resp.DBInstance.BackupTarget != nil {
		r.ko.Spec.BackupTarget = resp.DBInstance.BackupTarget
	} else {
		r.ko.Spec.BackupTarget = nil
	}
	if resp.DBInstance.CACertificateIdentifier != nil {
		r.ko.Status.CACertificateIdentifier = resp.DBInstance.CACertificateIdentifier
	} else {
		r.ko.Status.CACertificateIdentifier = nil
	}
	if resp.DBInstance.CharacterSetName != nil {
		r.ko.Spec.CharacterSetName = resp.DBInstance.CharacterSetName
	} else {
		r.ko.Spec.CharacterSetName = nil
	}
	if resp.DBInstance.CopyTagsToSnapshot != nil {
		r.ko.Spec.CopyTagsToSnapshot = resp.DBInstance.CopyTagsToSnapshot
	} else {
		r.ko.Spec.CopyTagsToSnapshot = nil
	}
	if resp.DBInstance.CustomIamInstanceProfile != nil {
		r.ko.Spec.CustomIAMInstanceProfile = resp.DBInstance.CustomIamInstanceProfile
	} else {
		r.ko.Spec.CustomIAMInstanceProfile = nil
	}
	if resp.DBInstance.CustomerOwnedIpEnabled != nil {
		r.ko.Status.CustomerOwnedIPEnabled = resp.DBInstance.CustomerOwnedIpEnabled
	} else {
		r.ko.Status.CustomerOwnedIPEnabled = nil
	}
	if resp.DBInstance.DBClusterIdentifier != nil {
		r.ko.Spec.DBClusterIdentifier = resp.DBInstance.DBClusterIdentifier
	} else {
		r.ko.Spec.DBClusterIdentifier = nil
	}
	if r.ko.Status.ACKResourceMetadata == nil {
		r.ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DBInstance.DBInstanceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DBInstance.DBInstanceArn)
		r.ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DBInstance.DBInstanceAutomatedBackupsReplications != nil {
		f22 := []*svcapitypes.DBInstanceAutomatedBackupsReplication{}
		for _, f22iter := range resp.DBInstance.DBInstanceAutomatedBackupsReplications {
			f22elem := &svcapitypes.DBInstanceAutomatedBackupsReplication{}
			if f22iter.DBInstanceAutomatedBackupsArn != nil {
				f22elem.DBInstanceAutomatedBackupsARN = f22iter.DBInstanceAutomatedBackupsArn
			}
			f22 = append(f22, f22elem)
		}
		r.ko.Status.DBInstanceAutomatedBackupsReplications = f22
	} else {
		r.ko.Status.DBInstanceAutomatedBackupsReplications = nil
	}
	if resp.DBInstance.DBInstanceClass != nil {
		r.ko.Spec.DBInstanceClass = resp.DBInstance.DBInstanceClass
	} else {
		r.ko.Spec.DBInstanceClass = nil
	}
	if resp.DBInstance.DBInstanceIdentifier != nil {
		r.ko.Spec.DBInstanceIdentifier = resp.DBInstance.DBInstanceIdentifier
	} else {
		r.ko.Spec.DBInstanceIdentifier = nil
	}
	if resp.DBInstance.DBInstanceStatus != nil {
		r.ko.Status.DBInstanceStatus = resp.DBInstance.DBInstanceStatus
	} else {
		r.ko.Status.DBInstanceStatus = nil
	}
	if resp.DBInstance.DBName != nil {
		r.ko.Spec.DBName = resp.DBInstance.DBName
	} else {
		r.ko.Spec.DBName = nil
	}
	if resp.DBInstance.DBParameterGroups != nil {
		f27 := []*svcapitypes.DBParameterGroupStatus_SDK{}
		for _, f27iter := range resp.DBInstance.DBParameterGroups {
			f27elem := &svcapitypes.DBParameterGroupStatus_SDK{}
			if f27iter.DBParameterGroupName != nil {
				f27elem.DBParameterGroupName = f27iter.DBParameterGroupName
			}
			if f27iter.ParameterApplyStatus != nil {
				f27elem.ParameterApplyStatus = f27iter.ParameterApplyStatus
			}
			f27 = append(f27, f27elem)
		}
		r.ko.Status.DBParameterGroups = f27
	} else {
		r.ko.Status.DBParameterGroups = nil
	}
	if resp.DBInstance.DBSubnetGroup != nil {
		f28 := &svcapitypes.DBSubnetGroup_SDK{}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn != nil {
			f28.DBSubnetGroupARN = resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription != nil {
			f28.DBSubnetGroupDescription = resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupName != nil {
			f28.DBSubnetGroupName = resp.DBInstance.DBSubnetGroup.DBSubnetGroupName
		}
		if resp.DBInstance.DBSubnetGroup.SubnetGroupStatus != nil {
			f28.SubnetGroupStatus = resp.DBInstance.DBSubnetGroup.SubnetGroupStatus
		}
		if resp.DBInstance.DBSubnetGroup.Subnets != nil {
			f28f4 := []*svcapitypes.Subnet{}
			for _, f28f4iter := range resp.DBInstance.DBSubnetGroup.Subnets {
				f28f4elem := &svcapitypes.Subnet{}
				if f28f4iter.SubnetAvailabilityZone != nil {
					f28f4elemf0 := &svcapitypes.AvailabilityZone{}
					if f28f4iter.SubnetAvailabilityZone.Name != nil {
						f28f4elemf0.Name = f28f4iter.SubnetAvailabilityZone.Name
					}
					f28f4elem.SubnetAvailabilityZone = f28f4elemf0
				}
				if f28f4iter.SubnetIdentifier != nil {
					f28f4elem.SubnetIdentifier = f28f4iter.SubnetIdentifier
				}
				if f28f4iter.SubnetOutpost != nil {
					f28f4elemf2 := &svcapitypes.Outpost{}
					if f28f4iter.SubnetOutpost.Arn != nil {
						f28f4elemf2.ARN = f28f4iter.SubnetOutpost.Arn
					}
					f28f4elem.SubnetOutpost = f28f4elemf2
				}
				if f28f4iter.SubnetStatus != nil {
					f28f4elem.SubnetStatus = f28f4iter.SubnetStatus
				}
				f28f4 = append(f28f4, f28f4elem)
			}
			f28.Subnets = f28f4
		}
		if resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes != nil {
			f28f5 := []*string{}
			for _, f28f5iter := range resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes {
				var f28f5elem string
				f28f5elem = *f28f5iter
				f28f5 = append(f28f5, &f28f5elem)
			}
			f28.SupportedNetworkTypes = f28f5
		}
		if resp.DBInstance.DBSubnetGroup.VpcId != nil {
			f28.VPCID = resp.DBInstance.DBSubnetGroup.VpcId
		}
		r.ko.Status.DBSubnetGroup = f28
	} else {
		r.ko.Status.DBSubnetGroup = nil
	}
	if resp.DBInstance.DbInstancePort != nil {
		r.ko.Status.DBInstancePort = resp.DBInstance.DbInstancePort
	} else {
		r.ko.Status.DBInstancePort = nil
	}
	if resp.DBInstance.DbiResourceId != nil {
		r.ko.Status.DBIResourceID = resp.DBInstance.DbiResourceId
	} else {
		r.ko.Status.DBIResourceID = nil
	}
	if resp.DBInstance.DeletionProtection != nil {
		r.ko.Spec.DeletionProtection = resp.DBInstance.DeletionProtection
	} else {
		r.ko.Spec.DeletionProtection = nil
	}
	if resp.DBInstance.DomainMemberships != nil {
		f32 := []*svcapitypes.DomainMembership{}
		for _, f32iter := range resp.DBInstance.DomainMemberships {
			f32elem := &svcapitypes.DomainMembership{}
			if f32iter.Domain != nil {
				f32elem.Domain = f32iter.Domain
			}
			if f32iter.FQDN != nil {
				f32elem.FQDN = f32iter.FQDN
			}
			if f32iter.IAMRoleName != nil {
				f32elem.IAMRoleName = f32iter.IAMRoleName
			}
			if f32iter.Status != nil {
				f32elem.Status = f32iter.Status
			}
			f32 = append(f32, f32elem)
		}
		r.ko.Status.DomainMemberships = f32
	} else {
		r.ko.Status.DomainMemberships = nil
	}
	if resp.DBInstance.EnabledCloudwatchLogsExports != nil {
		f33 := []*string{}
		for _, f33iter := range resp.DBInstance.EnabledCloudwatchLogsExports {
			var f33elem string
			f33elem = *f33iter
			f33 = append(f33, &f33elem)
		}
		r.ko.Status.EnabledCloudwatchLogsExports = f33
	} else {
		r.ko.Status.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBInstance.Endpoint != nil {
		f34 := &svcapitypes.Endpoint{}
		if resp.DBInstance.Endpoint.Address != nil {
			f34.Address = resp.DBInstance.Endpoint.Address
		}
		if resp.DBInstance.Endpoint.HostedZoneId != nil {
			f34.HostedZoneID = resp.DBInstance.Endpoint.HostedZoneId
		}
		if resp.DBInstance.Endpoint.Port != nil {
			f34.Port = resp.DBInstance.Endpoint.Port
		}
		r.ko.Status.Endpoint = f34
	} else {
		r.ko.Status.Endpoint = nil
	}
	if resp.DBInstance.Engine != nil {
		r.ko.Spec.Engine = resp.DBInstance.Engine
	} else {
		r.ko.Spec.Engine = nil
	}
	if resp.DBInstance.EngineVersion != nil {
		r.ko.Spec.EngineVersion = resp.DBInstance.EngineVersion
	} else {
		r.ko.Spec.EngineVersion = nil
	}
	if resp.DBInstance.EnhancedMonitoringResourceArn != nil {
		r.ko.Status.EnhancedMonitoringResourceARN = resp.DBInstance.EnhancedMonitoringResourceArn
	} else {
		r.ko.Status.EnhancedMonitoringResourceARN = nil
	}
	if resp.DBInstance.IAMDatabaseAuthenticationEnabled != nil {
		r.ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBInstance.IAMDatabaseAuthenticationEnabled
	} else {
		r.ko.Status.IAMDatabaseAuthenticationEnabled = nil
	}
	if resp.DBInstance.InstanceCreateTime != nil {
		r.ko.Status.InstanceCreateTime = &metav1.Time{*resp.DBInstance.InstanceCreateTime}
	} else {
		r.ko.Status.InstanceCreateTime = nil
	}
	if resp.DBInstance.Iops != nil {
		r.ko.Spec.IOPS = resp.DBInstance.Iops
	} else {
		r.ko.Spec.IOPS = nil
	}
	if resp.DBInstance.KmsKeyId != nil {
		r.ko.Spec.KMSKeyID = resp.DBInstance.KmsKeyId
	} else {
		r.ko.Spec.KMSKeyID = nil
	}
	if resp.DBInstance.LatestRestorableTime != nil {
		r.ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBInstance.LatestRestorableTime}
	} else {
		r.ko.Status.LatestRestorableTime = nil
	}
	if resp.DBInstance.LicenseModel != nil {
		r.ko.Spec.LicenseModel = resp.DBInstance.LicenseModel
	} else {
		r.ko.Spec.LicenseModel = nil
	}
	if resp.DBInstance.ListenerEndpoint != nil {
		f44 := &svcapitypes.Endpoint{}
		if resp.DBInstance.ListenerEndpoint.Address != nil {
			f44.Address = resp.DBInstance.ListenerEndpoint.Address
		}
		if resp.DBInstance.ListenerEndpoint.HostedZoneId != nil {
			f44.HostedZoneID = resp.DBInstance.ListenerEndpoint.HostedZoneId
		}
		if resp.DBInstance.ListenerEndpoint.Port != nil {
			f44.Port = resp.DBInstance.ListenerEndpoint.Port
		}
		r.ko.Status.ListenerEndpoint = f44
	} else {
		r.ko.Status.ListenerEndpoint = nil
	}
	if resp.DBInstance.MasterUsername != nil {
		r.ko.Spec.MasterUsername = resp.DBInstance.MasterUsername
	} else {
		r.ko.Spec.MasterUsername = nil
	}
	if resp.DBInstance.MaxAllocatedStorage != nil {
		r.ko.Spec.MaxAllocatedStorage = resp.DBInstance.MaxAllocatedStorage
	} else {
		r.ko.Spec.MaxAllocatedStorage = nil
	}
	if resp.DBInstance.MonitoringInterval != nil {
		r.ko.Spec.MonitoringInterval = resp.DBInstance.MonitoringInterval
	} else {
		r.ko.Spec.MonitoringInterval = nil
	}
	if resp.DBInstance.MonitoringRoleArn != nil {
		r.ko.Spec.MonitoringRoleARN = resp.DBInstance.MonitoringRoleArn
	} else {
		r.ko.Spec.MonitoringRoleARN = nil
	}
	if resp.DBInstance.MultiAZ != nil {
		r.ko.Spec.MultiAZ = resp.DBInstance.MultiAZ
	} else {
		r.ko.Spec.MultiAZ = nil
	}
	if resp.DBInstance.NcharCharacterSetName != nil {
		r.ko.Spec.NcharCharacterSetName = resp.DBInstance.NcharCharacterSetName
	} else {
		r.ko.Spec.NcharCharacterSetName = nil
	}
	if resp.DBInstance.NetworkType != nil {
		r.ko.Spec.NetworkType = resp.DBInstance.NetworkType
	} else {
		r.ko.Spec.NetworkType = nil
	}
	if resp.DBInstance.OptionGroupMemberships != nil {
		f52 := []*svcapitypes.OptionGroupMembership{}
		for _, f52iter := range resp.DBInstance.OptionGroupMemberships {
			f52elem := &svcapitypes.OptionGroupMembership{}
			if f52iter.OptionGroupName != nil {
				f52elem.OptionGroupName = f52iter.OptionGroupName
			}
			if f52iter.Status != nil {
				f52elem.Status = f52iter.Status
			}
			f52 = append(f52, f52elem)
		}
		r.ko.Status.OptionGroupMemberships = f52
	} else {
		r.ko.Status.OptionGroupMemberships = nil
	}
	if resp.DBInstance.PendingModifiedValues != nil {
		f53 := &svcapitypes.PendingModifiedValues{}
		if resp.DBInstance.PendingModifiedValues.AllocatedStorage != nil {
			f53.AllocatedStorage = resp.DBInstance.PendingModifiedValues.AllocatedStorage
		}
		if resp.DBInstance.PendingModifiedValues.AutomationMode != nil {
			f53.AutomationMode = resp.DBInstance.PendingModifiedValues.AutomationMode
		}
		if resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod != nil {
			f53.BackupRetentionPeriod = resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod
		}
		if resp.DBInstance.PendingModifiedValues.CACertificateIdentifier != nil {
			f53.CACertificateIdentifier = resp.DBInstance.PendingModifiedValues.CACertificateIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceClass != nil {
			f53.DBInstanceClass = resp.DBInstance.PendingModifiedValues.DBInstanceClass
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier != nil {
			f53.DBInstanceIdentifier = resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBSubnetGroupName != nil {
			f53.DBSubnetGroupName = resp.DBInstance.PendingModifiedValues.DBSubnetGroupName
		}
		if resp.DBInstance.PendingModifiedValues.EngineVersion != nil {
			f53.EngineVersion = resp.DBInstance.PendingModifiedValues.EngineVersion
		}
		if resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
			f53.IAMDatabaseAuthenticationEnabled = resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
		}
		if resp.DBInstance.PendingModifiedValues.Iops != nil {
			f53.IOPS = resp.DBInstance.PendingModifiedValues.Iops
		}
		if resp.DBInstance.PendingModifiedValues.LicenseModel != nil {
			f53.LicenseModel = resp.DBInstance.PendingModifiedValues.LicenseModel
		}
		if resp.DBInstance.PendingModifiedValues.MasterUserPassword != nil {
			f53.MasterUserPassword = resp.DBInstance.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBInstance.PendingModifiedValues.MultiAZ != nil {
			f53.MultiAZ = resp.DBInstance.PendingModifiedValues.MultiAZ
		}
		if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f53f13 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f53f13f0 := []*string{}
				for _, f53f13f0iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
					var f53f13f0elem string
					f53f13f0elem = *f53f13f0iter
					f53f13f0 = append(f53f13f0, &f53f13f0elem)
				}
				f53f13.LogTypesToDisable = f53f13f0
			}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f53f13f1 := []*string{}
				for _, f53f13f1iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
					var f53f13f1elem string
					f53f13f1elem = *f53f13f1iter
					f53f13f1 = append(f53f13f1, &f53f13f1elem)
				}
				f53f13.LogTypesToEnable = f53f13f1
			}
			f53.PendingCloudwatchLogsExports = f53f13
		}
		if resp.DBInstance.PendingModifiedValues.Port != nil {
			f53.Port = resp.DBInstance.PendingModifiedValues.Port
		}
		if resp.DBInstance.PendingModifiedValues.ProcessorFeatures != nil {
			f53f15 := []*svcapitypes.ProcessorFeature{}
			for _, f53f15iter := range resp.DBInstance.PendingModifiedValues.ProcessorFeatures {
				f53f15elem := &svcapitypes.ProcessorFeature{}
				if f53f15iter.Name != nil {
					f53f15elem.Name = f53f15iter.Name
				}
				if f53f15iter.Value != nil {
					f53f15elem.Value = f53f15iter.Value
				}
				f53f15 = append(f53f15, f53f15elem)
			}
			f53.ProcessorFeatures = f53f15
		}
		if resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime != nil {
			f53.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime}
		}
		if resp.DBInstance.PendingModifiedValues.StorageType != nil {
			f53.StorageType = resp.DBInstance.PendingModifiedValues.StorageType
		}
		r.ko.Status.PendingModifiedValues = f53
	} else {
		r.ko.Status.PendingModifiedValues = nil
	}
	if resp.DBInstance.PerformanceInsightsEnabled != nil {
		r.ko.Spec.PerformanceInsightsEnabled = resp.DBInstance.PerformanceInsightsEnabled
	} else {
		r.ko.Spec.PerformanceInsightsEnabled = nil
	}
	if resp.DBInstance.PerformanceInsightsKMSKeyId != nil {
		r.ko.Spec.PerformanceInsightsKMSKeyID = resp.DBInstance.PerformanceInsightsKMSKeyId
	} else {
		r.ko.Spec.PerformanceInsightsKMSKeyID = nil
	}
	if resp.DBInstance.PerformanceInsightsRetentionPeriod != nil {
		r.ko.Spec.PerformanceInsightsRetentionPeriod = resp.DBInstance.PerformanceInsightsRetentionPeriod
	} else {
		r.ko.Spec.PerformanceInsightsRetentionPeriod = nil
	}
	if resp.DBInstance.PreferredBackupWindow != nil {
		r.ko.Spec.PreferredBackupWindow = resp.DBInstance.PreferredBackupWindow
	} else {
		r.ko.Spec.PreferredBackupWindow = nil
	}
	if resp.DBInstance.PreferredMaintenanceWindow != nil {
		r.ko.Spec.PreferredMaintenanceWindow = resp.DBInstance.PreferredMaintenanceWindow
	} else {
		r.ko.Spec.PreferredMaintenanceWindow = nil
	}
	if resp.DBInstance.ProcessorFeatures != nil {
		f59 := []*svcapitypes.ProcessorFeature{}
		for _, f59iter := range resp.DBInstance.ProcessorFeatures {
			f59elem := &svcapitypes.ProcessorFeature{}
			if f59iter.Name != nil {
				f59elem.Name = f59iter.Name
			}
			if f59iter.Value != nil {
				f59elem.Value = f59iter.Value
			}
			f59 = append(f59, f59elem)
		}
		r.ko.Spec.ProcessorFeatures = f59
	} else {
		r.ko.Spec.ProcessorFeatures = nil
	}
	if resp.DBInstance.PromotionTier != nil {
		r.ko.Spec.PromotionTier = resp.DBInstance.PromotionTier
	} else {
		r.ko.Spec.PromotionTier = nil
	}
	if resp.DBInstance.PubliclyAccessible != nil {
		r.ko.Spec.PubliclyAccessible = resp.DBInstance.PubliclyAccessible
	} else {
		r.ko.Spec.PubliclyAccessible = nil
	}
	if resp.DBInstance.ReadReplicaDBClusterIdentifiers != nil {
		f62 := []*string{}
		for _, f62iter := range resp.DBInstance.ReadReplicaDBClusterIdentifiers {
			var f62elem string
			f62elem = *f62iter
			f62 = append(f62, &f62elem)
		}
		r.ko.Status.ReadReplicaDBClusterIdentifiers = f62
	} else {
		r.ko.Status.ReadReplicaDBClusterIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaDBInstanceIdentifiers != nil {
		f63 := []*string{}
		for _, f63iter := range resp.DBInstance.ReadReplicaDBInstanceIdentifiers {
			var f63elem string
			f63elem = *f63iter
			f63 = append(f63, &f63elem)
		}
		r.ko.Status.ReadReplicaDBInstanceIdentifiers = f63
	} else {
		r.ko.Status.ReadReplicaDBInstanceIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier != nil {
		r.ko.Status.ReadReplicaSourceDBInstanceIdentifier = resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier
	} else {
		r.ko.Status.ReadReplicaSourceDBInstanceIdentifier = nil
	}
	if resp.DBInstance.ReplicaMode != nil {
		r.ko.Spec.ReplicaMode = resp.DBInstance.ReplicaMode
	} else {
		r.ko.Spec.ReplicaMode = nil
	}
	if resp.DBInstance.ResumeFullAutomationModeTime != nil {
		r.ko.Status.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.ResumeFullAutomationModeTime}
	} else {
		r.ko.Status.ResumeFullAutomationModeTime = nil
	}
	if resp.DBInstance.SecondaryAvailabilityZone != nil {
		r.ko.Status.SecondaryAvailabilityZone = resp.DBInstance.SecondaryAvailabilityZone
	} else {
		r.ko.Status.SecondaryAvailabilityZone = nil
	}
	if resp.DBInstance.StatusInfos != nil {
		f68 := []*svcapitypes.DBInstanceStatusInfo{}
		for _, f68iter := range resp.DBInstance.StatusInfos {
			f68elem := &svcapitypes.DBInstanceStatusInfo{}
			if f68iter.Message != nil {
				f68elem.Message = f68iter.Message
			}
			if f68iter.Normal != nil {
				f68elem.Normal = f68iter.Normal
			}
			if f68iter.Status != nil {
				f68elem.Status = f68iter.Status
			}
			if f68iter.StatusType != nil {
				f68elem.StatusType = f68iter.StatusType
			}
			f68 = append(f68, f68elem)
		}
		r.ko.Status.StatusInfos = f68
	} else {
		r.ko.Status.StatusInfos = nil
	}
	if resp.DBInstance.StorageEncrypted != nil {
		r.ko.Spec.StorageEncrypted = resp.DBInstance.StorageEncrypted
	} else {
		r.ko.Spec.StorageEncrypted = nil
	}
	if resp.DBInstance.StorageType != nil {
		r.ko.Spec.StorageType = resp.DBInstance.StorageType
	} else {
		r.ko.Spec.StorageType = nil
	}
	if resp.DBInstance.TdeCredentialArn != nil {
		r.ko.Spec.TDECredentialARN = resp.DBInstance.TdeCredentialArn
	} else {
		r.ko.Spec.TDECredentialARN = nil
	}
	if resp.DBInstance.Timezone != nil {
		r.ko.Spec.Timezone = resp.DBInstance.Timezone
	} else {
		r.ko.Spec.Timezone = nil
	}
	if resp.DBInstance.VpcSecurityGroups != nil {
		f73 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f73iter := range resp.DBInstance.VpcSecurityGroups {
			f73elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f73iter.Status != nil {
				f73elem.Status = f73iter.Status
			}
			if f73iter.VpcSecurityGroupId != nil {
				f73elem.VPCSecurityGroupID = f73iter.VpcSecurityGroupId
			}
			f73 = append(f73, f73elem)
		}
		r.ko.Status.VPCSecurityGroups = f73
	} else {
		r.ko.Status.VPCSecurityGroups = nil
	}

}

// setResourceFromCreateDBInstanceReadReplicaOutput sets a resource CreateDBInstanceReadReplicaOutput type
// given the SDK type.
func (rm *resourceManager) setResourceFromCreateDBInstanceReadReplicaOutput(
	r *resource,
	resp *svcsdk.CreateDBInstanceReadReplicaOutput,
) {

	if resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded != nil {
		r.ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded
	} else {
		r.ko.Status.ActivityStreamEngineNativeAuditFieldsIncluded = nil
	}
	if resp.DBInstance.ActivityStreamKinesisStreamName != nil {
		r.ko.Status.ActivityStreamKinesisStreamName = resp.DBInstance.ActivityStreamKinesisStreamName
	} else {
		r.ko.Status.ActivityStreamKinesisStreamName = nil
	}
	if resp.DBInstance.ActivityStreamKmsKeyId != nil {
		r.ko.Status.ActivityStreamKMSKeyID = resp.DBInstance.ActivityStreamKmsKeyId
	} else {
		r.ko.Status.ActivityStreamKMSKeyID = nil
	}
	if resp.DBInstance.ActivityStreamMode != nil {
		r.ko.Status.ActivityStreamMode = resp.DBInstance.ActivityStreamMode
	} else {
		r.ko.Status.ActivityStreamMode = nil
	}
	if resp.DBInstance.ActivityStreamPolicyStatus != nil {
		r.ko.Status.ActivityStreamPolicyStatus = resp.DBInstance.ActivityStreamPolicyStatus
	} else {
		r.ko.Status.ActivityStreamPolicyStatus = nil
	}
	if resp.DBInstance.ActivityStreamStatus != nil {
		r.ko.Status.ActivityStreamStatus = resp.DBInstance.ActivityStreamStatus
	} else {
		r.ko.Status.ActivityStreamStatus = nil
	}
	if resp.DBInstance.AllocatedStorage != nil {
		r.ko.Spec.AllocatedStorage = resp.DBInstance.AllocatedStorage
	} else {
		r.ko.Spec.AllocatedStorage = nil
	}
	if resp.DBInstance.AssociatedRoles != nil {
		f7 := []*svcapitypes.DBInstanceRole{}
		for _, f7iter := range resp.DBInstance.AssociatedRoles {
			f7elem := &svcapitypes.DBInstanceRole{}
			if f7iter.FeatureName != nil {
				f7elem.FeatureName = f7iter.FeatureName
			}
			if f7iter.RoleArn != nil {
				f7elem.RoleARN = f7iter.RoleArn
			}
			if f7iter.Status != nil {
				f7elem.Status = f7iter.Status
			}
			f7 = append(f7, f7elem)
		}
		r.ko.Status.AssociatedRoles = f7
	} else {
		r.ko.Status.AssociatedRoles = nil
	}
	if resp.DBInstance.AutoMinorVersionUpgrade != nil {
		r.ko.Spec.AutoMinorVersionUpgrade = resp.DBInstance.AutoMinorVersionUpgrade
	} else {
		r.ko.Spec.AutoMinorVersionUpgrade = nil
	}
	if resp.DBInstance.AutomaticRestartTime != nil {
		r.ko.Status.AutomaticRestartTime = &metav1.Time{*resp.DBInstance.AutomaticRestartTime}
	} else {
		r.ko.Status.AutomaticRestartTime = nil
	}
	if resp.DBInstance.AutomationMode != nil {
		r.ko.Status.AutomationMode = resp.DBInstance.AutomationMode
	} else {
		r.ko.Status.AutomationMode = nil
	}
	if resp.DBInstance.AvailabilityZone != nil {
		r.ko.Spec.AvailabilityZone = resp.DBInstance.AvailabilityZone
	} else {
		r.ko.Spec.AvailabilityZone = nil
	}
	if resp.DBInstance.AwsBackupRecoveryPointArn != nil {
		r.ko.Status.AWSBackupRecoveryPointARN = resp.DBInstance.AwsBackupRecoveryPointArn
	} else {
		r.ko.Status.AWSBackupRecoveryPointARN = nil
	}
	if resp.DBInstance.BackupRetentionPeriod != nil {
		r.ko.Spec.BackupRetentionPeriod = resp.DBInstance.BackupRetentionPeriod
	} else {
		r.ko.Spec.BackupRetentionPeriod = nil
	}
	if resp.DBInstance.BackupTarget != nil {
		r.ko.Spec.BackupTarget = resp.DBInstance.BackupTarget
	} else {
		r.ko.Spec.BackupTarget = nil
	}
	if resp.DBInstance.CACertificateIdentifier != nil {
		r.ko.Status.CACertificateIdentifier = resp.DBInstance.CACertificateIdentifier
	} else {
		r.ko.Status.CACertificateIdentifier = nil
	}
	if resp.DBInstance.CharacterSetName != nil {
		r.ko.Spec.CharacterSetName = resp.DBInstance.CharacterSetName
	} else {
		r.ko.Spec.CharacterSetName = nil
	}
	if resp.DBInstance.CopyTagsToSnapshot != nil {
		r.ko.Spec.CopyTagsToSnapshot = resp.DBInstance.CopyTagsToSnapshot
	} else {
		r.ko.Spec.CopyTagsToSnapshot = nil
	}
	if resp.DBInstance.CustomIamInstanceProfile != nil {
		r.ko.Spec.CustomIAMInstanceProfile = resp.DBInstance.CustomIamInstanceProfile
	} else {
		r.ko.Spec.CustomIAMInstanceProfile = nil
	}
	if resp.DBInstance.CustomerOwnedIpEnabled != nil {
		r.ko.Status.CustomerOwnedIPEnabled = resp.DBInstance.CustomerOwnedIpEnabled
	} else {
		r.ko.Status.CustomerOwnedIPEnabled = nil
	}
	if resp.DBInstance.DBClusterIdentifier != nil {
		r.ko.Spec.DBClusterIdentifier = resp.DBInstance.DBClusterIdentifier
	} else {
		r.ko.Spec.DBClusterIdentifier = nil
	}
	if r.ko.Status.ACKResourceMetadata == nil {
		r.ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DBInstance.DBInstanceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DBInstance.DBInstanceArn)
		r.ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DBInstance.DBInstanceAutomatedBackupsReplications != nil {
		f22 := []*svcapitypes.DBInstanceAutomatedBackupsReplication{}
		for _, f22iter := range resp.DBInstance.DBInstanceAutomatedBackupsReplications {
			f22elem := &svcapitypes.DBInstanceAutomatedBackupsReplication{}
			if f22iter.DBInstanceAutomatedBackupsArn != nil {
				f22elem.DBInstanceAutomatedBackupsARN = f22iter.DBInstanceAutomatedBackupsArn
			}
			f22 = append(f22, f22elem)
		}
		r.ko.Status.DBInstanceAutomatedBackupsReplications = f22
	} else {
		r.ko.Status.DBInstanceAutomatedBackupsReplications = nil
	}
	if resp.DBInstance.DBInstanceClass != nil {
		r.ko.Spec.DBInstanceClass = resp.DBInstance.DBInstanceClass
	} else {
		r.ko.Spec.DBInstanceClass = nil
	}
	if resp.DBInstance.DBInstanceIdentifier != nil {
		r.ko.Spec.DBInstanceIdentifier = resp.DBInstance.DBInstanceIdentifier
	} else {
		r.ko.Spec.DBInstanceIdentifier = nil
	}
	if resp.DBInstance.DBInstanceStatus != nil {
		r.ko.Status.DBInstanceStatus = resp.DBInstance.DBInstanceStatus
	} else {
		r.ko.Status.DBInstanceStatus = nil
	}
	if resp.DBInstance.DBName != nil {
		r.ko.Spec.DBName = resp.DBInstance.DBName
	} else {
		r.ko.Spec.DBName = nil
	}
	if resp.DBInstance.DBParameterGroups != nil {
		f27 := []*svcapitypes.DBParameterGroupStatus_SDK{}
		for _, f27iter := range resp.DBInstance.DBParameterGroups {
			f27elem := &svcapitypes.DBParameterGroupStatus_SDK{}
			if f27iter.DBParameterGroupName != nil {
				f27elem.DBParameterGroupName = f27iter.DBParameterGroupName
			}
			if f27iter.ParameterApplyStatus != nil {
				f27elem.ParameterApplyStatus = f27iter.ParameterApplyStatus
			}
			f27 = append(f27, f27elem)
		}
		r.ko.Status.DBParameterGroups = f27
	} else {
		r.ko.Status.DBParameterGroups = nil
	}
	if resp.DBInstance.DBSubnetGroup != nil {
		f28 := &svcapitypes.DBSubnetGroup_SDK{}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn != nil {
			f28.DBSubnetGroupARN = resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription != nil {
			f28.DBSubnetGroupDescription = resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupName != nil {
			f28.DBSubnetGroupName = resp.DBInstance.DBSubnetGroup.DBSubnetGroupName
		}
		if resp.DBInstance.DBSubnetGroup.SubnetGroupStatus != nil {
			f28.SubnetGroupStatus = resp.DBInstance.DBSubnetGroup.SubnetGroupStatus
		}
		if resp.DBInstance.DBSubnetGroup.Subnets != nil {
			f28f4 := []*svcapitypes.Subnet{}
			for _, f28f4iter := range resp.DBInstance.DBSubnetGroup.Subnets {
				f28f4elem := &svcapitypes.Subnet{}
				if f28f4iter.SubnetAvailabilityZone != nil {
					f28f4elemf0 := &svcapitypes.AvailabilityZone{}
					if f28f4iter.SubnetAvailabilityZone.Name != nil {
						f28f4elemf0.Name = f28f4iter.SubnetAvailabilityZone.Name
					}
					f28f4elem.SubnetAvailabilityZone = f28f4elemf0
				}
				if f28f4iter.SubnetIdentifier != nil {
					f28f4elem.SubnetIdentifier = f28f4iter.SubnetIdentifier
				}
				if f28f4iter.SubnetOutpost != nil {
					f28f4elemf2 := &svcapitypes.Outpost{}
					if f28f4iter.SubnetOutpost.Arn != nil {
						f28f4elemf2.ARN = f28f4iter.SubnetOutpost.Arn
					}
					f28f4elem.SubnetOutpost = f28f4elemf2
				}
				if f28f4iter.SubnetStatus != nil {
					f28f4elem.SubnetStatus = f28f4iter.SubnetStatus
				}
				f28f4 = append(f28f4, f28f4elem)
			}
			f28.Subnets = f28f4
		}
		if resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes != nil {
			f28f5 := []*string{}
			for _, f28f5iter := range resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes {
				var f28f5elem string
				f28f5elem = *f28f5iter
				f28f5 = append(f28f5, &f28f5elem)
			}
			f28.SupportedNetworkTypes = f28f5
		}
		if resp.DBInstance.DBSubnetGroup.VpcId != nil {
			f28.VPCID = resp.DBInstance.DBSubnetGroup.VpcId
		}
		r.ko.Status.DBSubnetGroup = f28
	} else {
		r.ko.Status.DBSubnetGroup = nil
	}
	if resp.DBInstance.DbInstancePort != nil {
		r.ko.Status.DBInstancePort = resp.DBInstance.DbInstancePort
	} else {
		r.ko.Status.DBInstancePort = nil
	}
	if resp.DBInstance.DbiResourceId != nil {
		r.ko.Status.DBIResourceID = resp.DBInstance.DbiResourceId
	} else {
		r.ko.Status.DBIResourceID = nil
	}
	if resp.DBInstance.DeletionProtection != nil {
		r.ko.Spec.DeletionProtection = resp.DBInstance.DeletionProtection
	} else {
		r.ko.Spec.DeletionProtection = nil
	}
	if resp.DBInstance.DomainMemberships != nil {
		f32 := []*svcapitypes.DomainMembership{}
		for _, f32iter := range resp.DBInstance.DomainMemberships {
			f32elem := &svcapitypes.DomainMembership{}
			if f32iter.Domain != nil {
				f32elem.Domain = f32iter.Domain
			}
			if f32iter.FQDN != nil {
				f32elem.FQDN = f32iter.FQDN
			}
			if f32iter.IAMRoleName != nil {
				f32elem.IAMRoleName = f32iter.IAMRoleName
			}
			if f32iter.Status != nil {
				f32elem.Status = f32iter.Status
			}
			f32 = append(f32, f32elem)
		}
		r.ko.Status.DomainMemberships = f32
	} else {
		r.ko.Status.DomainMemberships = nil
	}
	if resp.DBInstance.EnabledCloudwatchLogsExports != nil {
		f33 := []*string{}
		for _, f33iter := range resp.DBInstance.EnabledCloudwatchLogsExports {
			var f33elem string
			f33elem = *f33iter
			f33 = append(f33, &f33elem)
		}
		r.ko.Status.EnabledCloudwatchLogsExports = f33
	} else {
		r.ko.Status.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBInstance.Endpoint != nil {
		f34 := &svcapitypes.Endpoint{}
		if resp.DBInstance.Endpoint.Address != nil {
			f34.Address = resp.DBInstance.Endpoint.Address
		}
		if resp.DBInstance.Endpoint.HostedZoneId != nil {
			f34.HostedZoneID = resp.DBInstance.Endpoint.HostedZoneId
		}
		if resp.DBInstance.Endpoint.Port != nil {
			f34.Port = resp.DBInstance.Endpoint.Port
		}
		r.ko.Status.Endpoint = f34
	} else {
		r.ko.Status.Endpoint = nil
	}
	if resp.DBInstance.Engine != nil {
		r.ko.Spec.Engine = resp.DBInstance.Engine
	} else {
		r.ko.Spec.Engine = nil
	}
	if resp.DBInstance.EngineVersion != nil {
		r.ko.Spec.EngineVersion = resp.DBInstance.EngineVersion
	} else {
		r.ko.Spec.EngineVersion = nil
	}
	if resp.DBInstance.EnhancedMonitoringResourceArn != nil {
		r.ko.Status.EnhancedMonitoringResourceARN = resp.DBInstance.EnhancedMonitoringResourceArn
	} else {
		r.ko.Status.EnhancedMonitoringResourceARN = nil
	}
	if resp.DBInstance.IAMDatabaseAuthenticationEnabled != nil {
		r.ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBInstance.IAMDatabaseAuthenticationEnabled
	} else {
		r.ko.Status.IAMDatabaseAuthenticationEnabled = nil
	}
	if resp.DBInstance.InstanceCreateTime != nil {
		r.ko.Status.InstanceCreateTime = &metav1.Time{*resp.DBInstance.InstanceCreateTime}
	} else {
		r.ko.Status.InstanceCreateTime = nil
	}
	if resp.DBInstance.Iops != nil {
		r.ko.Spec.IOPS = resp.DBInstance.Iops
	} else {
		r.ko.Spec.IOPS = nil
	}
	if resp.DBInstance.KmsKeyId != nil {
		r.ko.Spec.KMSKeyID = resp.DBInstance.KmsKeyId
	} else {
		r.ko.Spec.KMSKeyID = nil
	}
	if resp.DBInstance.LatestRestorableTime != nil {
		r.ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBInstance.LatestRestorableTime}
	} else {
		r.ko.Status.LatestRestorableTime = nil
	}
	if resp.DBInstance.LicenseModel != nil {
		r.ko.Spec.LicenseModel = resp.DBInstance.LicenseModel
	} else {
		r.ko.Spec.LicenseModel = nil
	}
	if resp.DBInstance.ListenerEndpoint != nil {
		f44 := &svcapitypes.Endpoint{}
		if resp.DBInstance.ListenerEndpoint.Address != nil {
			f44.Address = resp.DBInstance.ListenerEndpoint.Address
		}
		if resp.DBInstance.ListenerEndpoint.HostedZoneId != nil {
			f44.HostedZoneID = resp.DBInstance.ListenerEndpoint.HostedZoneId
		}
		if resp.DBInstance.ListenerEndpoint.Port != nil {
			f44.Port = resp.DBInstance.ListenerEndpoint.Port
		}
		r.ko.Status.ListenerEndpoint = f44
	} else {
		r.ko.Status.ListenerEndpoint = nil
	}
	if resp.DBInstance.MasterUsername != nil {
		r.ko.Spec.MasterUsername = resp.DBInstance.MasterUsername
	} else {
		r.ko.Spec.MasterUsername = nil
	}
	if resp.DBInstance.MaxAllocatedStorage != nil {
		r.ko.Spec.MaxAllocatedStorage = resp.DBInstance.MaxAllocatedStorage
	} else {
		r.ko.Spec.MaxAllocatedStorage = nil
	}
	if resp.DBInstance.MonitoringInterval != nil {
		r.ko.Spec.MonitoringInterval = resp.DBInstance.MonitoringInterval
	} else {
		r.ko.Spec.MonitoringInterval = nil
	}
	if resp.DBInstance.MonitoringRoleArn != nil {
		r.ko.Spec.MonitoringRoleARN = resp.DBInstance.MonitoringRoleArn
	} else {
		r.ko.Spec.MonitoringRoleARN = nil
	}
	if resp.DBInstance.MultiAZ != nil {
		r.ko.Spec.MultiAZ = resp.DBInstance.MultiAZ
	} else {
		r.ko.Spec.MultiAZ = nil
	}
	if resp.DBInstance.NcharCharacterSetName != nil {
		r.ko.Spec.NcharCharacterSetName = resp.DBInstance.NcharCharacterSetName
	} else {
		r.ko.Spec.NcharCharacterSetName = nil
	}
	if resp.DBInstance.NetworkType != nil {
		r.ko.Spec.NetworkType = resp.DBInstance.NetworkType
	} else {
		r.ko.Spec.NetworkType = nil
	}
	if resp.DBInstance.OptionGroupMemberships != nil {
		f52 := []*svcapitypes.OptionGroupMembership{}
		for _, f52iter := range resp.DBInstance.OptionGroupMemberships {
			f52elem := &svcapitypes.OptionGroupMembership{}
			if f52iter.OptionGroupName != nil {
				f52elem.OptionGroupName = f52iter.OptionGroupName
			}
			if f52iter.Status != nil {
				f52elem.Status = f52iter.Status
			}
			f52 = append(f52, f52elem)
		}
		r.ko.Status.OptionGroupMemberships = f52
	} else {
		r.ko.Status.OptionGroupMemberships = nil
	}
	if resp.DBInstance.PendingModifiedValues != nil {
		f53 := &svcapitypes.PendingModifiedValues{}
		if resp.DBInstance.PendingModifiedValues.AllocatedStorage != nil {
			f53.AllocatedStorage = resp.DBInstance.PendingModifiedValues.AllocatedStorage
		}
		if resp.DBInstance.PendingModifiedValues.AutomationMode != nil {
			f53.AutomationMode = resp.DBInstance.PendingModifiedValues.AutomationMode
		}
		if resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod != nil {
			f53.BackupRetentionPeriod = resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod
		}
		if resp.DBInstance.PendingModifiedValues.CACertificateIdentifier != nil {
			f53.CACertificateIdentifier = resp.DBInstance.PendingModifiedValues.CACertificateIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceClass != nil {
			f53.DBInstanceClass = resp.DBInstance.PendingModifiedValues.DBInstanceClass
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier != nil {
			f53.DBInstanceIdentifier = resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBSubnetGroupName != nil {
			f53.DBSubnetGroupName = resp.DBInstance.PendingModifiedValues.DBSubnetGroupName
		}
		if resp.DBInstance.PendingModifiedValues.EngineVersion != nil {
			f53.EngineVersion = resp.DBInstance.PendingModifiedValues.EngineVersion
		}
		if resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
			f53.IAMDatabaseAuthenticationEnabled = resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
		}
		if resp.DBInstance.PendingModifiedValues.Iops != nil {
			f53.IOPS = resp.DBInstance.PendingModifiedValues.Iops
		}
		if resp.DBInstance.PendingModifiedValues.LicenseModel != nil {
			f53.LicenseModel = resp.DBInstance.PendingModifiedValues.LicenseModel
		}
		if resp.DBInstance.PendingModifiedValues.MasterUserPassword != nil {
			f53.MasterUserPassword = resp.DBInstance.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBInstance.PendingModifiedValues.MultiAZ != nil {
			f53.MultiAZ = resp.DBInstance.PendingModifiedValues.MultiAZ
		}
		if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f53f13 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f53f13f0 := []*string{}
				for _, f53f13f0iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
					var f53f13f0elem string
					f53f13f0elem = *f53f13f0iter
					f53f13f0 = append(f53f13f0, &f53f13f0elem)
				}
				f53f13.LogTypesToDisable = f53f13f0
			}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f53f13f1 := []*string{}
				for _, f53f13f1iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
					var f53f13f1elem string
					f53f13f1elem = *f53f13f1iter
					f53f13f1 = append(f53f13f1, &f53f13f1elem)
				}
				f53f13.LogTypesToEnable = f53f13f1
			}
			f53.PendingCloudwatchLogsExports = f53f13
		}
		if resp.DBInstance.PendingModifiedValues.Port != nil {
			f53.Port = resp.DBInstance.PendingModifiedValues.Port
		}
		if resp.DBInstance.PendingModifiedValues.ProcessorFeatures != nil {
			f53f15 := []*svcapitypes.ProcessorFeature{}
			for _, f53f15iter := range resp.DBInstance.PendingModifiedValues.ProcessorFeatures {
				f53f15elem := &svcapitypes.ProcessorFeature{}
				if f53f15iter.Name != nil {
					f53f15elem.Name = f53f15iter.Name
				}
				if f53f15iter.Value != nil {
					f53f15elem.Value = f53f15iter.Value
				}
				f53f15 = append(f53f15, f53f15elem)
			}
			f53.ProcessorFeatures = f53f15
		}
		if resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime != nil {
			f53.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime}
		}
		if resp.DBInstance.PendingModifiedValues.StorageType != nil {
			f53.StorageType = resp.DBInstance.PendingModifiedValues.StorageType
		}
		r.ko.Status.PendingModifiedValues = f53
	} else {
		r.ko.Status.PendingModifiedValues = nil
	}
	if resp.DBInstance.PerformanceInsightsEnabled != nil {
		r.ko.Spec.PerformanceInsightsEnabled = resp.DBInstance.PerformanceInsightsEnabled
	} else {
		r.ko.Spec.PerformanceInsightsEnabled = nil
	}
	if resp.DBInstance.PerformanceInsightsKMSKeyId != nil {
		r.ko.Spec.PerformanceInsightsKMSKeyID = resp.DBInstance.PerformanceInsightsKMSKeyId
	} else {
		r.ko.Spec.PerformanceInsightsKMSKeyID = nil
	}
	if resp.DBInstance.PerformanceInsightsRetentionPeriod != nil {
		r.ko.Spec.PerformanceInsightsRetentionPeriod = resp.DBInstance.PerformanceInsightsRetentionPeriod
	} else {
		r.ko.Spec.PerformanceInsightsRetentionPeriod = nil
	}
	if resp.DBInstance.PreferredBackupWindow != nil {
		r.ko.Spec.PreferredBackupWindow = resp.DBInstance.PreferredBackupWindow
	} else {
		r.ko.Spec.PreferredBackupWindow = nil
	}
	if resp.DBInstance.PreferredMaintenanceWindow != nil {
		r.ko.Spec.PreferredMaintenanceWindow = resp.DBInstance.PreferredMaintenanceWindow
	} else {
		r.ko.Spec.PreferredMaintenanceWindow = nil
	}
	if resp.DBInstance.ProcessorFeatures != nil {
		f59 := []*svcapitypes.ProcessorFeature{}
		for _, f59iter := range resp.DBInstance.ProcessorFeatures {
			f59elem := &svcapitypes.ProcessorFeature{}
			if f59iter.Name != nil {
				f59elem.Name = f59iter.Name
			}
			if f59iter.Value != nil {
				f59elem.Value = f59iter.Value
			}
			f59 = append(f59, f59elem)
		}
		r.ko.Spec.ProcessorFeatures = f59
	} else {
		r.ko.Spec.ProcessorFeatures = nil
	}
	if resp.DBInstance.PromotionTier != nil {
		r.ko.Spec.PromotionTier = resp.DBInstance.PromotionTier
	} else {
		r.ko.Spec.PromotionTier = nil
	}
	if resp.DBInstance.PubliclyAccessible != nil {
		r.ko.Spec.PubliclyAccessible = resp.DBInstance.PubliclyAccessible
	} else {
		r.ko.Spec.PubliclyAccessible = nil
	}
	if resp.DBInstance.ReadReplicaDBClusterIdentifiers != nil {
		f62 := []*string{}
		for _, f62iter := range resp.DBInstance.ReadReplicaDBClusterIdentifiers {
			var f62elem string
			f62elem = *f62iter
			f62 = append(f62, &f62elem)
		}
		r.ko.Status.ReadReplicaDBClusterIdentifiers = f62
	} else {
		r.ko.Status.ReadReplicaDBClusterIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaDBInstanceIdentifiers != nil {
		f63 := []*string{}
		for _, f63iter := range resp.DBInstance.ReadReplicaDBInstanceIdentifiers {
			var f63elem string
			f63elem = *f63iter
			f63 = append(f63, &f63elem)
		}
		r.ko.Status.ReadReplicaDBInstanceIdentifiers = f63
	} else {
		r.ko.Status.ReadReplicaDBInstanceIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier != nil {
		r.ko.Status.ReadReplicaSourceDBInstanceIdentifier = resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier
	} else {
		r.ko.Status.ReadReplicaSourceDBInstanceIdentifier = nil
	}
	if resp.DBInstance.ReplicaMode != nil {
		r.ko.Spec.ReplicaMode = resp.DBInstance.ReplicaMode
	} else {
		r.ko.Spec.ReplicaMode = nil
	}
	if resp.DBInstance.ResumeFullAutomationModeTime != nil {
		r.ko.Status.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.ResumeFullAutomationModeTime}
	} else {
		r.ko.Status.ResumeFullAutomationModeTime = nil
	}
	if resp.DBInstance.SecondaryAvailabilityZone != nil {
		r.ko.Status.SecondaryAvailabilityZone = resp.DBInstance.SecondaryAvailabilityZone
	} else {
		r.ko.Status.SecondaryAvailabilityZone = nil
	}
	if resp.DBInstance.StatusInfos != nil {
		f68 := []*svcapitypes.DBInstanceStatusInfo{}
		for _, f68iter := range resp.DBInstance.StatusInfos {
			f68elem := &svcapitypes.DBInstanceStatusInfo{}
			if f68iter.Message != nil {
				f68elem.Message = f68iter.Message
			}
			if f68iter.Normal != nil {
				f68elem.Normal = f68iter.Normal
			}
			if f68iter.Status != nil {
				f68elem.Status = f68iter.Status
			}
			if f68iter.StatusType != nil {
				f68elem.StatusType = f68iter.StatusType
			}
			f68 = append(f68, f68elem)
		}
		r.ko.Status.StatusInfos = f68
	} else {
		r.ko.Status.StatusInfos = nil
	}
	if resp.DBInstance.StorageEncrypted != nil {
		r.ko.Spec.StorageEncrypted = resp.DBInstance.StorageEncrypted
	} else {
		r.ko.Spec.StorageEncrypted = nil
	}
	if resp.DBInstance.StorageType != nil {
		r.ko.Spec.StorageType = resp.DBInstance.StorageType
	} else {
		r.ko.Spec.StorageType = nil
	}
	if resp.DBInstance.TdeCredentialArn != nil {
		r.ko.Spec.TDECredentialARN = resp.DBInstance.TdeCredentialArn
	} else {
		r.ko.Spec.TDECredentialARN = nil
	}
	if resp.DBInstance.Timezone != nil {
		r.ko.Spec.Timezone = resp.DBInstance.Timezone
	} else {
		r.ko.Spec.Timezone = nil
	}
	if resp.DBInstance.VpcSecurityGroups != nil {
		f73 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f73iter := range resp.DBInstance.VpcSecurityGroups {
			f73elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f73iter.Status != nil {
				f73elem.Status = f73iter.Status
			}
			if f73iter.VpcSecurityGroupId != nil {
				f73elem.VPCSecurityGroupID = f73iter.VpcSecurityGroupId
			}
			f73 = append(f73, f73elem)
		}
		r.ko.Status.VPCSecurityGroups = f73
	} else {
		r.ko.Status.VPCSecurityGroups = nil
	}

}
