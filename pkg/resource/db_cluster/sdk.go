// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package db_cluster

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/rds-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.RDS{}
	_ = &svcapitypes.DBCluster{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer exit(err)
	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeDBClustersOutput
	resp, err = rm.sdkapi.DescribeDBClustersWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeDBClusters", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "DBClusterNotFoundFault" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.DBClusters {
		if elem.ActivityStreamKinesisStreamName != nil {
			ko.Status.ActivityStreamKinesisStreamName = elem.ActivityStreamKinesisStreamName
		} else {
			ko.Status.ActivityStreamKinesisStreamName = nil
		}
		if elem.ActivityStreamKmsKeyId != nil {
			ko.Status.ActivityStreamKMSKeyID = elem.ActivityStreamKmsKeyId
		} else {
			ko.Status.ActivityStreamKMSKeyID = nil
		}
		if elem.ActivityStreamMode != nil {
			ko.Status.ActivityStreamMode = elem.ActivityStreamMode
		} else {
			ko.Status.ActivityStreamMode = nil
		}
		if elem.ActivityStreamStatus != nil {
			ko.Status.ActivityStreamStatus = elem.ActivityStreamStatus
		} else {
			ko.Status.ActivityStreamStatus = nil
		}
		if elem.AllocatedStorage != nil {
			ko.Status.AllocatedStorage = elem.AllocatedStorage
		} else {
			ko.Status.AllocatedStorage = nil
		}
		if elem.AssociatedRoles != nil {
			f5 := []*svcapitypes.DBClusterRole{}
			for _, f5iter := range elem.AssociatedRoles {
				f5elem := &svcapitypes.DBClusterRole{}
				if f5iter.FeatureName != nil {
					f5elem.FeatureName = f5iter.FeatureName
				}
				if f5iter.RoleArn != nil {
					f5elem.RoleARN = f5iter.RoleArn
				}
				if f5iter.Status != nil {
					f5elem.Status = f5iter.Status
				}
				f5 = append(f5, f5elem)
			}
			ko.Status.AssociatedRoles = f5
		} else {
			ko.Status.AssociatedRoles = nil
		}
		if elem.AvailabilityZones != nil {
			f6 := []*string{}
			for _, f6iter := range elem.AvailabilityZones {
				var f6elem string
				f6elem = *f6iter
				f6 = append(f6, &f6elem)
			}
			ko.Spec.AvailabilityZones = f6
		} else {
			ko.Spec.AvailabilityZones = nil
		}
		if elem.BacktrackConsumedChangeRecords != nil {
			ko.Status.BacktrackConsumedChangeRecords = elem.BacktrackConsumedChangeRecords
		} else {
			ko.Status.BacktrackConsumedChangeRecords = nil
		}
		if elem.BacktrackWindow != nil {
			ko.Spec.BacktrackWindow = elem.BacktrackWindow
		} else {
			ko.Spec.BacktrackWindow = nil
		}
		if elem.BackupRetentionPeriod != nil {
			ko.Spec.BackupRetentionPeriod = elem.BackupRetentionPeriod
		} else {
			ko.Spec.BackupRetentionPeriod = nil
		}
		if elem.Capacity != nil {
			ko.Status.Capacity = elem.Capacity
		} else {
			ko.Status.Capacity = nil
		}
		if elem.CharacterSetName != nil {
			ko.Spec.CharacterSetName = elem.CharacterSetName
		} else {
			ko.Spec.CharacterSetName = nil
		}
		if elem.CloneGroupId != nil {
			ko.Status.CloneGroupID = elem.CloneGroupId
		} else {
			ko.Status.CloneGroupID = nil
		}
		if elem.ClusterCreateTime != nil {
			ko.Status.ClusterCreateTime = &metav1.Time{*elem.ClusterCreateTime}
		} else {
			ko.Status.ClusterCreateTime = nil
		}
		if elem.CopyTagsToSnapshot != nil {
			ko.Spec.CopyTagsToSnapshot = elem.CopyTagsToSnapshot
		} else {
			ko.Spec.CopyTagsToSnapshot = nil
		}
		if elem.CrossAccountClone != nil {
			ko.Status.CrossAccountClone = elem.CrossAccountClone
		} else {
			ko.Status.CrossAccountClone = nil
		}
		if elem.CustomEndpoints != nil {
			f16 := []*string{}
			for _, f16iter := range elem.CustomEndpoints {
				var f16elem string
				f16elem = *f16iter
				f16 = append(f16, &f16elem)
			}
			ko.Status.CustomEndpoints = f16
		} else {
			ko.Status.CustomEndpoints = nil
		}
		if elem.DBClusterArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.DBClusterArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.DBClusterIdentifier != nil {
			ko.Spec.DBClusterIdentifier = elem.DBClusterIdentifier
		} else {
			ko.Spec.DBClusterIdentifier = nil
		}
		if elem.DBClusterMembers != nil {
			f19 := []*svcapitypes.DBClusterMember{}
			for _, f19iter := range elem.DBClusterMembers {
				f19elem := &svcapitypes.DBClusterMember{}
				if f19iter.DBClusterParameterGroupStatus != nil {
					f19elem.DBClusterParameterGroupStatus = f19iter.DBClusterParameterGroupStatus
				}
				if f19iter.DBInstanceIdentifier != nil {
					f19elem.DBInstanceIdentifier = f19iter.DBInstanceIdentifier
				}
				if f19iter.IsClusterWriter != nil {
					f19elem.IsClusterWriter = f19iter.IsClusterWriter
				}
				if f19iter.PromotionTier != nil {
					f19elem.PromotionTier = f19iter.PromotionTier
				}
				f19 = append(f19, f19elem)
			}
			ko.Status.DBClusterMembers = f19
		} else {
			ko.Status.DBClusterMembers = nil
		}
		if elem.DBClusterOptionGroupMemberships != nil {
			f20 := []*svcapitypes.DBClusterOptionGroupStatus{}
			for _, f20iter := range elem.DBClusterOptionGroupMemberships {
				f20elem := &svcapitypes.DBClusterOptionGroupStatus{}
				if f20iter.DBClusterOptionGroupName != nil {
					f20elem.DBClusterOptionGroupName = f20iter.DBClusterOptionGroupName
				}
				if f20iter.Status != nil {
					f20elem.Status = f20iter.Status
				}
				f20 = append(f20, f20elem)
			}
			ko.Status.DBClusterOptionGroupMemberships = f20
		} else {
			ko.Status.DBClusterOptionGroupMemberships = nil
		}
		if elem.DBClusterParameterGroup != nil {
			ko.Status.DBClusterParameterGroup = elem.DBClusterParameterGroup
		} else {
			ko.Status.DBClusterParameterGroup = nil
		}
		if elem.DBSubnetGroup != nil {
			ko.Status.DBSubnetGroup = elem.DBSubnetGroup
		} else {
			ko.Status.DBSubnetGroup = nil
		}
		if elem.DatabaseName != nil {
			ko.Spec.DatabaseName = elem.DatabaseName
		} else {
			ko.Spec.DatabaseName = nil
		}
		if elem.DbClusterResourceId != nil {
			ko.Status.DBClusterResourceID = elem.DbClusterResourceId
		} else {
			ko.Status.DBClusterResourceID = nil
		}
		if elem.DeletionProtection != nil {
			ko.Spec.DeletionProtection = elem.DeletionProtection
		} else {
			ko.Spec.DeletionProtection = nil
		}
		if elem.DomainMemberships != nil {
			f26 := []*svcapitypes.DomainMembership{}
			for _, f26iter := range elem.DomainMemberships {
				f26elem := &svcapitypes.DomainMembership{}
				if f26iter.Domain != nil {
					f26elem.Domain = f26iter.Domain
				}
				if f26iter.FQDN != nil {
					f26elem.FQDN = f26iter.FQDN
				}
				if f26iter.IAMRoleName != nil {
					f26elem.IAMRoleName = f26iter.IAMRoleName
				}
				if f26iter.Status != nil {
					f26elem.Status = f26iter.Status
				}
				f26 = append(f26, f26elem)
			}
			ko.Status.DomainMemberships = f26
		} else {
			ko.Status.DomainMemberships = nil
		}
		if elem.EarliestBacktrackTime != nil {
			ko.Status.EarliestBacktrackTime = &metav1.Time{*elem.EarliestBacktrackTime}
		} else {
			ko.Status.EarliestBacktrackTime = nil
		}
		if elem.EarliestRestorableTime != nil {
			ko.Status.EarliestRestorableTime = &metav1.Time{*elem.EarliestRestorableTime}
		} else {
			ko.Status.EarliestRestorableTime = nil
		}
		if elem.EnabledCloudwatchLogsExports != nil {
			f29 := []*string{}
			for _, f29iter := range elem.EnabledCloudwatchLogsExports {
				var f29elem string
				f29elem = *f29iter
				f29 = append(f29, &f29elem)
			}
			ko.Status.EnabledCloudwatchLogsExports = f29
		} else {
			ko.Status.EnabledCloudwatchLogsExports = nil
		}
		if elem.Endpoint != nil {
			ko.Status.Endpoint = elem.Endpoint
		} else {
			ko.Status.Endpoint = nil
		}
		if elem.Engine != nil {
			ko.Spec.Engine = elem.Engine
		} else {
			ko.Spec.Engine = nil
		}
		if elem.EngineMode != nil {
			ko.Spec.EngineMode = elem.EngineMode
		} else {
			ko.Spec.EngineMode = nil
		}
		if elem.EngineVersion != nil {
			ko.Spec.EngineVersion = elem.EngineVersion
		} else {
			ko.Spec.EngineVersion = nil
		}
		if elem.GlobalWriteForwardingRequested != nil {
			ko.Status.GlobalWriteForwardingRequested = elem.GlobalWriteForwardingRequested
		} else {
			ko.Status.GlobalWriteForwardingRequested = nil
		}
		if elem.GlobalWriteForwardingStatus != nil {
			ko.Status.GlobalWriteForwardingStatus = elem.GlobalWriteForwardingStatus
		} else {
			ko.Status.GlobalWriteForwardingStatus = nil
		}
		if elem.HostedZoneId != nil {
			ko.Status.HostedZoneID = elem.HostedZoneId
		} else {
			ko.Status.HostedZoneID = nil
		}
		if elem.HttpEndpointEnabled != nil {
			ko.Status.HTTPEndpointEnabled = elem.HttpEndpointEnabled
		} else {
			ko.Status.HTTPEndpointEnabled = nil
		}
		if elem.IAMDatabaseAuthenticationEnabled != nil {
			ko.Status.IAMDatabaseAuthenticationEnabled = elem.IAMDatabaseAuthenticationEnabled
		} else {
			ko.Status.IAMDatabaseAuthenticationEnabled = nil
		}
		if elem.KmsKeyId != nil {
			ko.Spec.KMSKeyID = elem.KmsKeyId
		} else {
			ko.Spec.KMSKeyID = nil
		}
		if elem.LatestRestorableTime != nil {
			ko.Status.LatestRestorableTime = &metav1.Time{*elem.LatestRestorableTime}
		} else {
			ko.Status.LatestRestorableTime = nil
		}
		if elem.MasterUsername != nil {
			ko.Spec.MasterUsername = elem.MasterUsername
		} else {
			ko.Spec.MasterUsername = nil
		}
		if elem.MultiAZ != nil {
			ko.Status.MultiAZ = elem.MultiAZ
		} else {
			ko.Status.MultiAZ = nil
		}
		if elem.PendingModifiedValues != nil {
			f43 := &svcapitypes.ClusterPendingModifiedValues{}
			if elem.PendingModifiedValues.DBClusterIdentifier != nil {
				f43.DBClusterIdentifier = elem.PendingModifiedValues.DBClusterIdentifier
			}
			if elem.PendingModifiedValues.EngineVersion != nil {
				f43.EngineVersion = elem.PendingModifiedValues.EngineVersion
			}
			if elem.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
				f43.IAMDatabaseAuthenticationEnabled = elem.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
			}
			if elem.PendingModifiedValues.MasterUserPassword != nil {
				f43.MasterUserPassword = elem.PendingModifiedValues.MasterUserPassword
			}
			if elem.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
				f43f4 := &svcapitypes.PendingCloudwatchLogsExports{}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
					f43f4f0 := []*string{}
					for _, f43f4f0iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
						var f43f4f0elem string
						f43f4f0elem = *f43f4f0iter
						f43f4f0 = append(f43f4f0, &f43f4f0elem)
					}
					f43f4.LogTypesToDisable = f43f4f0
				}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
					f43f4f1 := []*string{}
					for _, f43f4f1iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
						var f43f4f1elem string
						f43f4f1elem = *f43f4f1iter
						f43f4f1 = append(f43f4f1, &f43f4f1elem)
					}
					f43f4.LogTypesToEnable = f43f4f1
				}
				f43.PendingCloudwatchLogsExports = f43f4
			}
			ko.Status.PendingModifiedValues = f43
		} else {
			ko.Status.PendingModifiedValues = nil
		}
		if elem.PercentProgress != nil {
			ko.Status.PercentProgress = elem.PercentProgress
		} else {
			ko.Status.PercentProgress = nil
		}
		if elem.Port != nil {
			ko.Spec.Port = elem.Port
		} else {
			ko.Spec.Port = nil
		}
		if elem.PreferredBackupWindow != nil {
			ko.Spec.PreferredBackupWindow = elem.PreferredBackupWindow
		} else {
			ko.Spec.PreferredBackupWindow = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			ko.Spec.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			ko.Spec.PreferredMaintenanceWindow = nil
		}
		if elem.ReadReplicaIdentifiers != nil {
			f48 := []*string{}
			for _, f48iter := range elem.ReadReplicaIdentifiers {
				var f48elem string
				f48elem = *f48iter
				f48 = append(f48, &f48elem)
			}
			ko.Status.ReadReplicaIdentifiers = f48
		} else {
			ko.Status.ReadReplicaIdentifiers = nil
		}
		if elem.ReaderEndpoint != nil {
			ko.Status.ReaderEndpoint = elem.ReaderEndpoint
		} else {
			ko.Status.ReaderEndpoint = nil
		}
		if elem.ReplicationSourceIdentifier != nil {
			ko.Spec.ReplicationSourceIdentifier = elem.ReplicationSourceIdentifier
		} else {
			ko.Spec.ReplicationSourceIdentifier = nil
		}
		if elem.ScalingConfigurationInfo != nil {
			f51 := &svcapitypes.ScalingConfigurationInfo{}
			if elem.ScalingConfigurationInfo.AutoPause != nil {
				f51.AutoPause = elem.ScalingConfigurationInfo.AutoPause
			}
			if elem.ScalingConfigurationInfo.MaxCapacity != nil {
				f51.MaxCapacity = elem.ScalingConfigurationInfo.MaxCapacity
			}
			if elem.ScalingConfigurationInfo.MinCapacity != nil {
				f51.MinCapacity = elem.ScalingConfigurationInfo.MinCapacity
			}
			if elem.ScalingConfigurationInfo.SecondsUntilAutoPause != nil {
				f51.SecondsUntilAutoPause = elem.ScalingConfigurationInfo.SecondsUntilAutoPause
			}
			if elem.ScalingConfigurationInfo.TimeoutAction != nil {
				f51.TimeoutAction = elem.ScalingConfigurationInfo.TimeoutAction
			}
			ko.Status.ScalingConfigurationInfo = f51
		} else {
			ko.Status.ScalingConfigurationInfo = nil
		}
		if elem.Status != nil {
			ko.Status.Status = elem.Status
		} else {
			ko.Status.Status = nil
		}
		if elem.StorageEncrypted != nil {
			ko.Spec.StorageEncrypted = elem.StorageEncrypted
		} else {
			ko.Spec.StorageEncrypted = nil
		}
		if elem.TagList != nil {
			f54 := []*svcapitypes.Tag{}
			for _, f54iter := range elem.TagList {
				f54elem := &svcapitypes.Tag{}
				if f54iter.Key != nil {
					f54elem.Key = f54iter.Key
				}
				if f54iter.Value != nil {
					f54elem.Value = f54iter.Value
				}
				f54 = append(f54, f54elem)
			}
			ko.Status.TagList = f54
		} else {
			ko.Status.TagList = nil
		}
		if elem.VpcSecurityGroups != nil {
			f55 := []*svcapitypes.VPCSecurityGroupMembership{}
			for _, f55iter := range elem.VpcSecurityGroups {
				f55elem := &svcapitypes.VPCSecurityGroupMembership{}
				if f55iter.Status != nil {
					f55elem.Status = f55iter.Status
				}
				if f55iter.VpcSecurityGroupId != nil {
					f55elem.VPCSecurityGroupID = f55iter.VpcSecurityGroupId
				}
				f55 = append(f55, f55elem)
			}
			ko.Status.VPCSecurityGroups = f55
		} else {
			ko.Status.VPCSecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeDBClustersInput, error) {
	res := &svcsdk.DescribeDBClustersInput{}

	if r.ko.Spec.DBClusterIdentifier != nil {
		res.SetDBClusterIdentifier(*r.ko.Spec.DBClusterIdentifier)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer exit(err)
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateDBClusterOutput
	_ = resp
	resp, err = rm.sdkapi.CreateDBClusterWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateDBCluster", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.DBCluster.ActivityStreamKinesisStreamName != nil {
		ko.Status.ActivityStreamKinesisStreamName = resp.DBCluster.ActivityStreamKinesisStreamName
	} else {
		ko.Status.ActivityStreamKinesisStreamName = nil
	}
	if resp.DBCluster.ActivityStreamKmsKeyId != nil {
		ko.Status.ActivityStreamKMSKeyID = resp.DBCluster.ActivityStreamKmsKeyId
	} else {
		ko.Status.ActivityStreamKMSKeyID = nil
	}
	if resp.DBCluster.ActivityStreamMode != nil {
		ko.Status.ActivityStreamMode = resp.DBCluster.ActivityStreamMode
	} else {
		ko.Status.ActivityStreamMode = nil
	}
	if resp.DBCluster.ActivityStreamStatus != nil {
		ko.Status.ActivityStreamStatus = resp.DBCluster.ActivityStreamStatus
	} else {
		ko.Status.ActivityStreamStatus = nil
	}
	if resp.DBCluster.AllocatedStorage != nil {
		ko.Status.AllocatedStorage = resp.DBCluster.AllocatedStorage
	} else {
		ko.Status.AllocatedStorage = nil
	}
	if resp.DBCluster.AssociatedRoles != nil {
		f5 := []*svcapitypes.DBClusterRole{}
		for _, f5iter := range resp.DBCluster.AssociatedRoles {
			f5elem := &svcapitypes.DBClusterRole{}
			if f5iter.FeatureName != nil {
				f5elem.FeatureName = f5iter.FeatureName
			}
			if f5iter.RoleArn != nil {
				f5elem.RoleARN = f5iter.RoleArn
			}
			if f5iter.Status != nil {
				f5elem.Status = f5iter.Status
			}
			f5 = append(f5, f5elem)
		}
		ko.Status.AssociatedRoles = f5
	} else {
		ko.Status.AssociatedRoles = nil
	}
	if resp.DBCluster.BacktrackConsumedChangeRecords != nil {
		ko.Status.BacktrackConsumedChangeRecords = resp.DBCluster.BacktrackConsumedChangeRecords
	} else {
		ko.Status.BacktrackConsumedChangeRecords = nil
	}
	if resp.DBCluster.Capacity != nil {
		ko.Status.Capacity = resp.DBCluster.Capacity
	} else {
		ko.Status.Capacity = nil
	}
	if resp.DBCluster.CloneGroupId != nil {
		ko.Status.CloneGroupID = resp.DBCluster.CloneGroupId
	} else {
		ko.Status.CloneGroupID = nil
	}
	if resp.DBCluster.ClusterCreateTime != nil {
		ko.Status.ClusterCreateTime = &metav1.Time{*resp.DBCluster.ClusterCreateTime}
	} else {
		ko.Status.ClusterCreateTime = nil
	}
	if resp.DBCluster.CrossAccountClone != nil {
		ko.Status.CrossAccountClone = resp.DBCluster.CrossAccountClone
	} else {
		ko.Status.CrossAccountClone = nil
	}
	if resp.DBCluster.CustomEndpoints != nil {
		f16 := []*string{}
		for _, f16iter := range resp.DBCluster.CustomEndpoints {
			var f16elem string
			f16elem = *f16iter
			f16 = append(f16, &f16elem)
		}
		ko.Status.CustomEndpoints = f16
	} else {
		ko.Status.CustomEndpoints = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DBCluster.DBClusterArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DBCluster.DBClusterArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DBCluster.DBClusterMembers != nil {
		f19 := []*svcapitypes.DBClusterMember{}
		for _, f19iter := range resp.DBCluster.DBClusterMembers {
			f19elem := &svcapitypes.DBClusterMember{}
			if f19iter.DBClusterParameterGroupStatus != nil {
				f19elem.DBClusterParameterGroupStatus = f19iter.DBClusterParameterGroupStatus
			}
			if f19iter.DBInstanceIdentifier != nil {
				f19elem.DBInstanceIdentifier = f19iter.DBInstanceIdentifier
			}
			if f19iter.IsClusterWriter != nil {
				f19elem.IsClusterWriter = f19iter.IsClusterWriter
			}
			if f19iter.PromotionTier != nil {
				f19elem.PromotionTier = f19iter.PromotionTier
			}
			f19 = append(f19, f19elem)
		}
		ko.Status.DBClusterMembers = f19
	} else {
		ko.Status.DBClusterMembers = nil
	}
	if resp.DBCluster.DBClusterOptionGroupMemberships != nil {
		f20 := []*svcapitypes.DBClusterOptionGroupStatus{}
		for _, f20iter := range resp.DBCluster.DBClusterOptionGroupMemberships {
			f20elem := &svcapitypes.DBClusterOptionGroupStatus{}
			if f20iter.DBClusterOptionGroupName != nil {
				f20elem.DBClusterOptionGroupName = f20iter.DBClusterOptionGroupName
			}
			if f20iter.Status != nil {
				f20elem.Status = f20iter.Status
			}
			f20 = append(f20, f20elem)
		}
		ko.Status.DBClusterOptionGroupMemberships = f20
	} else {
		ko.Status.DBClusterOptionGroupMemberships = nil
	}
	if resp.DBCluster.DBClusterParameterGroup != nil {
		ko.Status.DBClusterParameterGroup = resp.DBCluster.DBClusterParameterGroup
	} else {
		ko.Status.DBClusterParameterGroup = nil
	}
	if resp.DBCluster.DBSubnetGroup != nil {
		ko.Status.DBSubnetGroup = resp.DBCluster.DBSubnetGroup
	} else {
		ko.Status.DBSubnetGroup = nil
	}
	if resp.DBCluster.DbClusterResourceId != nil {
		ko.Status.DBClusterResourceID = resp.DBCluster.DbClusterResourceId
	} else {
		ko.Status.DBClusterResourceID = nil
	}
	if resp.DBCluster.DomainMemberships != nil {
		f26 := []*svcapitypes.DomainMembership{}
		for _, f26iter := range resp.DBCluster.DomainMemberships {
			f26elem := &svcapitypes.DomainMembership{}
			if f26iter.Domain != nil {
				f26elem.Domain = f26iter.Domain
			}
			if f26iter.FQDN != nil {
				f26elem.FQDN = f26iter.FQDN
			}
			if f26iter.IAMRoleName != nil {
				f26elem.IAMRoleName = f26iter.IAMRoleName
			}
			if f26iter.Status != nil {
				f26elem.Status = f26iter.Status
			}
			f26 = append(f26, f26elem)
		}
		ko.Status.DomainMemberships = f26
	} else {
		ko.Status.DomainMemberships = nil
	}
	if resp.DBCluster.EarliestBacktrackTime != nil {
		ko.Status.EarliestBacktrackTime = &metav1.Time{*resp.DBCluster.EarliestBacktrackTime}
	} else {
		ko.Status.EarliestBacktrackTime = nil
	}
	if resp.DBCluster.EarliestRestorableTime != nil {
		ko.Status.EarliestRestorableTime = &metav1.Time{*resp.DBCluster.EarliestRestorableTime}
	} else {
		ko.Status.EarliestRestorableTime = nil
	}
	if resp.DBCluster.EnabledCloudwatchLogsExports != nil {
		f29 := []*string{}
		for _, f29iter := range resp.DBCluster.EnabledCloudwatchLogsExports {
			var f29elem string
			f29elem = *f29iter
			f29 = append(f29, &f29elem)
		}
		ko.Status.EnabledCloudwatchLogsExports = f29
	} else {
		ko.Status.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBCluster.Endpoint != nil {
		ko.Status.Endpoint = resp.DBCluster.Endpoint
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DBCluster.GlobalWriteForwardingRequested != nil {
		ko.Status.GlobalWriteForwardingRequested = resp.DBCluster.GlobalWriteForwardingRequested
	} else {
		ko.Status.GlobalWriteForwardingRequested = nil
	}
	if resp.DBCluster.GlobalWriteForwardingStatus != nil {
		ko.Status.GlobalWriteForwardingStatus = resp.DBCluster.GlobalWriteForwardingStatus
	} else {
		ko.Status.GlobalWriteForwardingStatus = nil
	}
	if resp.DBCluster.HostedZoneId != nil {
		ko.Status.HostedZoneID = resp.DBCluster.HostedZoneId
	} else {
		ko.Status.HostedZoneID = nil
	}
	if resp.DBCluster.HttpEndpointEnabled != nil {
		ko.Status.HTTPEndpointEnabled = resp.DBCluster.HttpEndpointEnabled
	} else {
		ko.Status.HTTPEndpointEnabled = nil
	}
	if resp.DBCluster.IAMDatabaseAuthenticationEnabled != nil {
		ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBCluster.IAMDatabaseAuthenticationEnabled
	} else {
		ko.Status.IAMDatabaseAuthenticationEnabled = nil
	}
	if resp.DBCluster.LatestRestorableTime != nil {
		ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBCluster.LatestRestorableTime}
	} else {
		ko.Status.LatestRestorableTime = nil
	}
	if resp.DBCluster.MultiAZ != nil {
		ko.Status.MultiAZ = resp.DBCluster.MultiAZ
	} else {
		ko.Status.MultiAZ = nil
	}
	if resp.DBCluster.PendingModifiedValues != nil {
		f43 := &svcapitypes.ClusterPendingModifiedValues{}
		if resp.DBCluster.PendingModifiedValues.DBClusterIdentifier != nil {
			f43.DBClusterIdentifier = resp.DBCluster.PendingModifiedValues.DBClusterIdentifier
		}
		if resp.DBCluster.PendingModifiedValues.EngineVersion != nil {
			f43.EngineVersion = resp.DBCluster.PendingModifiedValues.EngineVersion
		}
		if resp.DBCluster.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
			f43.IAMDatabaseAuthenticationEnabled = resp.DBCluster.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
		}
		if resp.DBCluster.PendingModifiedValues.MasterUserPassword != nil {
			f43.MasterUserPassword = resp.DBCluster.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f43f4 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f43f4f0 := []*string{}
				for _, f43f4f0iter := range resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
					var f43f4f0elem string
					f43f4f0elem = *f43f4f0iter
					f43f4f0 = append(f43f4f0, &f43f4f0elem)
				}
				f43f4.LogTypesToDisable = f43f4f0
			}
			if resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f43f4f1 := []*string{}
				for _, f43f4f1iter := range resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
					var f43f4f1elem string
					f43f4f1elem = *f43f4f1iter
					f43f4f1 = append(f43f4f1, &f43f4f1elem)
				}
				f43f4.LogTypesToEnable = f43f4f1
			}
			f43.PendingCloudwatchLogsExports = f43f4
		}
		ko.Status.PendingModifiedValues = f43
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.DBCluster.PercentProgress != nil {
		ko.Status.PercentProgress = resp.DBCluster.PercentProgress
	} else {
		ko.Status.PercentProgress = nil
	}
	if resp.DBCluster.ReadReplicaIdentifiers != nil {
		f48 := []*string{}
		for _, f48iter := range resp.DBCluster.ReadReplicaIdentifiers {
			var f48elem string
			f48elem = *f48iter
			f48 = append(f48, &f48elem)
		}
		ko.Status.ReadReplicaIdentifiers = f48
	} else {
		ko.Status.ReadReplicaIdentifiers = nil
	}
	if resp.DBCluster.ReaderEndpoint != nil {
		ko.Status.ReaderEndpoint = resp.DBCluster.ReaderEndpoint
	} else {
		ko.Status.ReaderEndpoint = nil
	}
	if resp.DBCluster.ScalingConfigurationInfo != nil {
		f51 := &svcapitypes.ScalingConfigurationInfo{}
		if resp.DBCluster.ScalingConfigurationInfo.AutoPause != nil {
			f51.AutoPause = resp.DBCluster.ScalingConfigurationInfo.AutoPause
		}
		if resp.DBCluster.ScalingConfigurationInfo.MaxCapacity != nil {
			f51.MaxCapacity = resp.DBCluster.ScalingConfigurationInfo.MaxCapacity
		}
		if resp.DBCluster.ScalingConfigurationInfo.MinCapacity != nil {
			f51.MinCapacity = resp.DBCluster.ScalingConfigurationInfo.MinCapacity
		}
		if resp.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause != nil {
			f51.SecondsUntilAutoPause = resp.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause
		}
		if resp.DBCluster.ScalingConfigurationInfo.TimeoutAction != nil {
			f51.TimeoutAction = resp.DBCluster.ScalingConfigurationInfo.TimeoutAction
		}
		ko.Status.ScalingConfigurationInfo = f51
	} else {
		ko.Status.ScalingConfigurationInfo = nil
	}
	if resp.DBCluster.Status != nil {
		ko.Status.Status = resp.DBCluster.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.DBCluster.TagList != nil {
		f54 := []*svcapitypes.Tag{}
		for _, f54iter := range resp.DBCluster.TagList {
			f54elem := &svcapitypes.Tag{}
			if f54iter.Key != nil {
				f54elem.Key = f54iter.Key
			}
			if f54iter.Value != nil {
				f54elem.Value = f54iter.Value
			}
			f54 = append(f54, f54elem)
		}
		ko.Status.TagList = f54
	} else {
		ko.Status.TagList = nil
	}
	if resp.DBCluster.VpcSecurityGroups != nil {
		f55 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f55iter := range resp.DBCluster.VpcSecurityGroups {
			f55elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f55iter.Status != nil {
				f55elem.Status = f55iter.Status
			}
			if f55iter.VpcSecurityGroupId != nil {
				f55elem.VPCSecurityGroupID = f55iter.VpcSecurityGroupId
			}
			f55 = append(f55, f55elem)
		}
		ko.Status.VPCSecurityGroups = f55
	} else {
		ko.Status.VPCSecurityGroups = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateDBClusterInput, error) {
	res := &svcsdk.CreateDBClusterInput{}

	if r.ko.Spec.AvailabilityZones != nil {
		f0 := []*string{}
		for _, f0iter := range r.ko.Spec.AvailabilityZones {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAvailabilityZones(f0)
	}
	if r.ko.Spec.BacktrackWindow != nil {
		res.SetBacktrackWindow(*r.ko.Spec.BacktrackWindow)
	}
	if r.ko.Spec.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*r.ko.Spec.BackupRetentionPeriod)
	}
	if r.ko.Spec.CharacterSetName != nil {
		res.SetCharacterSetName(*r.ko.Spec.CharacterSetName)
	}
	if r.ko.Spec.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*r.ko.Spec.CopyTagsToSnapshot)
	}
	if r.ko.Spec.DBClusterIdentifier != nil {
		res.SetDBClusterIdentifier(*r.ko.Spec.DBClusterIdentifier)
	}
	if r.ko.Spec.DBClusterParameterGroupName != nil {
		res.SetDBClusterParameterGroupName(*r.ko.Spec.DBClusterParameterGroupName)
	}
	if r.ko.Spec.DBSubnetGroupName != nil {
		res.SetDBSubnetGroupName(*r.ko.Spec.DBSubnetGroupName)
	}
	if r.ko.Spec.DatabaseName != nil {
		res.SetDatabaseName(*r.ko.Spec.DatabaseName)
	}
	if r.ko.Spec.DeletionProtection != nil {
		res.SetDeletionProtection(*r.ko.Spec.DeletionProtection)
	}
	if r.ko.Spec.DestinationRegion != nil {
		res.SetDestinationRegion(*r.ko.Spec.DestinationRegion)
	}
	if r.ko.Spec.Domain != nil {
		res.SetDomain(*r.ko.Spec.Domain)
	}
	if r.ko.Spec.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*r.ko.Spec.DomainIAMRoleName)
	}
	if r.ko.Spec.EnableCloudwatchLogsExports != nil {
		f13 := []*string{}
		for _, f13iter := range r.ko.Spec.EnableCloudwatchLogsExports {
			var f13elem string
			f13elem = *f13iter
			f13 = append(f13, &f13elem)
		}
		res.SetEnableCloudwatchLogsExports(f13)
	}
	if r.ko.Spec.EnableGlobalWriteForwarding != nil {
		res.SetEnableGlobalWriteForwarding(*r.ko.Spec.EnableGlobalWriteForwarding)
	}
	if r.ko.Spec.EnableHTTPEndpoint != nil {
		res.SetEnableHttpEndpoint(*r.ko.Spec.EnableHTTPEndpoint)
	}
	if r.ko.Spec.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*r.ko.Spec.EnableIAMDatabaseAuthentication)
	}
	if r.ko.Spec.Engine != nil {
		res.SetEngine(*r.ko.Spec.Engine)
	}
	if r.ko.Spec.EngineMode != nil {
		res.SetEngineMode(*r.ko.Spec.EngineMode)
	}
	if r.ko.Spec.EngineVersion != nil {
		res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	}
	if r.ko.Spec.GlobalClusterIdentifier != nil {
		res.SetGlobalClusterIdentifier(*r.ko.Spec.GlobalClusterIdentifier)
	}
	if r.ko.Spec.KMSKeyID != nil {
		res.SetKmsKeyId(*r.ko.Spec.KMSKeyID)
	}
	if r.ko.Spec.MasterUserPassword != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.MasterUserPassword)
		if err != nil {
			return nil, err
		}
		if tmpSecret != "" {
			res.SetMasterUserPassword(tmpSecret)
		}
	}
	if r.ko.Spec.MasterUsername != nil {
		res.SetMasterUsername(*r.ko.Spec.MasterUsername)
	}
	if r.ko.Spec.OptionGroupName != nil {
		res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)
	}
	if r.ko.Spec.Port != nil {
		res.SetPort(*r.ko.Spec.Port)
	}
	if r.ko.Spec.PreSignedURL != nil {
		res.SetPreSignedUrl(*r.ko.Spec.PreSignedURL)
	}
	if r.ko.Spec.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*r.ko.Spec.PreferredBackupWindow)
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	}
	if r.ko.Spec.ReplicationSourceIdentifier != nil {
		res.SetReplicationSourceIdentifier(*r.ko.Spec.ReplicationSourceIdentifier)
	}
	if r.ko.Spec.ScalingConfiguration != nil {
		f30 := &svcsdk.ScalingConfiguration{}
		if r.ko.Spec.ScalingConfiguration.AutoPause != nil {
			f30.SetAutoPause(*r.ko.Spec.ScalingConfiguration.AutoPause)
		}
		if r.ko.Spec.ScalingConfiguration.MaxCapacity != nil {
			f30.SetMaxCapacity(*r.ko.Spec.ScalingConfiguration.MaxCapacity)
		}
		if r.ko.Spec.ScalingConfiguration.MinCapacity != nil {
			f30.SetMinCapacity(*r.ko.Spec.ScalingConfiguration.MinCapacity)
		}
		if r.ko.Spec.ScalingConfiguration.SecondsUntilAutoPause != nil {
			f30.SetSecondsUntilAutoPause(*r.ko.Spec.ScalingConfiguration.SecondsUntilAutoPause)
		}
		if r.ko.Spec.ScalingConfiguration.TimeoutAction != nil {
			f30.SetTimeoutAction(*r.ko.Spec.ScalingConfiguration.TimeoutAction)
		}
		res.SetScalingConfiguration(f30)
	}
	if r.ko.Spec.SourceRegion != nil {
		res.SetSourceRegion(*r.ko.Spec.SourceRegion)
	}
	if r.ko.Spec.StorageEncrypted != nil {
		res.SetStorageEncrypted(*r.ko.Spec.StorageEncrypted)
	}
	if r.ko.Spec.Tags != nil {
		f33 := []*svcsdk.Tag{}
		for _, f33iter := range r.ko.Spec.Tags {
			f33elem := &svcsdk.Tag{}
			if f33iter.Key != nil {
				f33elem.SetKey(*f33iter.Key)
			}
			if f33iter.Value != nil {
				f33elem.SetValue(*f33iter.Value)
			}
			f33 = append(f33, f33elem)
		}
		res.SetTags(f33)
	}
	if r.ko.Spec.VPCSecurityGroupIDs != nil {
		f34 := []*string{}
		for _, f34iter := range r.ko.Spec.VPCSecurityGroupIDs {
			var f34elem string
			f34elem = *f34iter
			f34 = append(f34, &f34elem)
		}
		res.SetVpcSecurityGroupIds(f34)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer exit(err)
	if clusterDeleting(latest) {
		msg := "DB cluster is currently being deleted"
		setSyncedCondition(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitWhileDeleting
	}
	if clusterCreating(latest) {
		msg := "DB cluster is currently being created"
		setSyncedCondition(desired, corev1.ConditionFalse, &msg, nil)
		return desired, requeueWaitUntilCanModify(latest)
	}
	if clusterHasTerminalStatus(latest) {
		msg := "DB cluster is in '" + *latest.ko.Status.Status + "' status"
		setTerminalCondition(desired, corev1.ConditionTrue, &msg, nil)
		setSyncedCondition(desired, corev1.ConditionTrue, nil, nil)
		return desired, nil
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.ModifyDBClusterOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyDBClusterWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyDBCluster", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.DBCluster.ActivityStreamKinesisStreamName != nil {
		ko.Status.ActivityStreamKinesisStreamName = resp.DBCluster.ActivityStreamKinesisStreamName
	} else {
		ko.Status.ActivityStreamKinesisStreamName = nil
	}
	if resp.DBCluster.ActivityStreamKmsKeyId != nil {
		ko.Status.ActivityStreamKMSKeyID = resp.DBCluster.ActivityStreamKmsKeyId
	} else {
		ko.Status.ActivityStreamKMSKeyID = nil
	}
	if resp.DBCluster.ActivityStreamMode != nil {
		ko.Status.ActivityStreamMode = resp.DBCluster.ActivityStreamMode
	} else {
		ko.Status.ActivityStreamMode = nil
	}
	if resp.DBCluster.ActivityStreamStatus != nil {
		ko.Status.ActivityStreamStatus = resp.DBCluster.ActivityStreamStatus
	} else {
		ko.Status.ActivityStreamStatus = nil
	}
	if resp.DBCluster.AllocatedStorage != nil {
		ko.Status.AllocatedStorage = resp.DBCluster.AllocatedStorage
	} else {
		ko.Status.AllocatedStorage = nil
	}
	if resp.DBCluster.AssociatedRoles != nil {
		f5 := []*svcapitypes.DBClusterRole{}
		for _, f5iter := range resp.DBCluster.AssociatedRoles {
			f5elem := &svcapitypes.DBClusterRole{}
			if f5iter.FeatureName != nil {
				f5elem.FeatureName = f5iter.FeatureName
			}
			if f5iter.RoleArn != nil {
				f5elem.RoleARN = f5iter.RoleArn
			}
			if f5iter.Status != nil {
				f5elem.Status = f5iter.Status
			}
			f5 = append(f5, f5elem)
		}
		ko.Status.AssociatedRoles = f5
	} else {
		ko.Status.AssociatedRoles = nil
	}
	if resp.DBCluster.BacktrackConsumedChangeRecords != nil {
		ko.Status.BacktrackConsumedChangeRecords = resp.DBCluster.BacktrackConsumedChangeRecords
	} else {
		ko.Status.BacktrackConsumedChangeRecords = nil
	}
	if resp.DBCluster.Capacity != nil {
		ko.Status.Capacity = resp.DBCluster.Capacity
	} else {
		ko.Status.Capacity = nil
	}
	if resp.DBCluster.CloneGroupId != nil {
		ko.Status.CloneGroupID = resp.DBCluster.CloneGroupId
	} else {
		ko.Status.CloneGroupID = nil
	}
	if resp.DBCluster.ClusterCreateTime != nil {
		ko.Status.ClusterCreateTime = &metav1.Time{*resp.DBCluster.ClusterCreateTime}
	} else {
		ko.Status.ClusterCreateTime = nil
	}
	if resp.DBCluster.CrossAccountClone != nil {
		ko.Status.CrossAccountClone = resp.DBCluster.CrossAccountClone
	} else {
		ko.Status.CrossAccountClone = nil
	}
	if resp.DBCluster.CustomEndpoints != nil {
		f16 := []*string{}
		for _, f16iter := range resp.DBCluster.CustomEndpoints {
			var f16elem string
			f16elem = *f16iter
			f16 = append(f16, &f16elem)
		}
		ko.Status.CustomEndpoints = f16
	} else {
		ko.Status.CustomEndpoints = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DBCluster.DBClusterArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DBCluster.DBClusterArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DBCluster.DBClusterMembers != nil {
		f19 := []*svcapitypes.DBClusterMember{}
		for _, f19iter := range resp.DBCluster.DBClusterMembers {
			f19elem := &svcapitypes.DBClusterMember{}
			if f19iter.DBClusterParameterGroupStatus != nil {
				f19elem.DBClusterParameterGroupStatus = f19iter.DBClusterParameterGroupStatus
			}
			if f19iter.DBInstanceIdentifier != nil {
				f19elem.DBInstanceIdentifier = f19iter.DBInstanceIdentifier
			}
			if f19iter.IsClusterWriter != nil {
				f19elem.IsClusterWriter = f19iter.IsClusterWriter
			}
			if f19iter.PromotionTier != nil {
				f19elem.PromotionTier = f19iter.PromotionTier
			}
			f19 = append(f19, f19elem)
		}
		ko.Status.DBClusterMembers = f19
	} else {
		ko.Status.DBClusterMembers = nil
	}
	if resp.DBCluster.DBClusterOptionGroupMemberships != nil {
		f20 := []*svcapitypes.DBClusterOptionGroupStatus{}
		for _, f20iter := range resp.DBCluster.DBClusterOptionGroupMemberships {
			f20elem := &svcapitypes.DBClusterOptionGroupStatus{}
			if f20iter.DBClusterOptionGroupName != nil {
				f20elem.DBClusterOptionGroupName = f20iter.DBClusterOptionGroupName
			}
			if f20iter.Status != nil {
				f20elem.Status = f20iter.Status
			}
			f20 = append(f20, f20elem)
		}
		ko.Status.DBClusterOptionGroupMemberships = f20
	} else {
		ko.Status.DBClusterOptionGroupMemberships = nil
	}
	if resp.DBCluster.DBClusterParameterGroup != nil {
		ko.Status.DBClusterParameterGroup = resp.DBCluster.DBClusterParameterGroup
	} else {
		ko.Status.DBClusterParameterGroup = nil
	}
	if resp.DBCluster.DBSubnetGroup != nil {
		ko.Status.DBSubnetGroup = resp.DBCluster.DBSubnetGroup
	} else {
		ko.Status.DBSubnetGroup = nil
	}
	if resp.DBCluster.DbClusterResourceId != nil {
		ko.Status.DBClusterResourceID = resp.DBCluster.DbClusterResourceId
	} else {
		ko.Status.DBClusterResourceID = nil
	}
	if resp.DBCluster.DomainMemberships != nil {
		f26 := []*svcapitypes.DomainMembership{}
		for _, f26iter := range resp.DBCluster.DomainMemberships {
			f26elem := &svcapitypes.DomainMembership{}
			if f26iter.Domain != nil {
				f26elem.Domain = f26iter.Domain
			}
			if f26iter.FQDN != nil {
				f26elem.FQDN = f26iter.FQDN
			}
			if f26iter.IAMRoleName != nil {
				f26elem.IAMRoleName = f26iter.IAMRoleName
			}
			if f26iter.Status != nil {
				f26elem.Status = f26iter.Status
			}
			f26 = append(f26, f26elem)
		}
		ko.Status.DomainMemberships = f26
	} else {
		ko.Status.DomainMemberships = nil
	}
	if resp.DBCluster.EarliestBacktrackTime != nil {
		ko.Status.EarliestBacktrackTime = &metav1.Time{*resp.DBCluster.EarliestBacktrackTime}
	} else {
		ko.Status.EarliestBacktrackTime = nil
	}
	if resp.DBCluster.EarliestRestorableTime != nil {
		ko.Status.EarliestRestorableTime = &metav1.Time{*resp.DBCluster.EarliestRestorableTime}
	} else {
		ko.Status.EarliestRestorableTime = nil
	}
	if resp.DBCluster.EnabledCloudwatchLogsExports != nil {
		f29 := []*string{}
		for _, f29iter := range resp.DBCluster.EnabledCloudwatchLogsExports {
			var f29elem string
			f29elem = *f29iter
			f29 = append(f29, &f29elem)
		}
		ko.Status.EnabledCloudwatchLogsExports = f29
	} else {
		ko.Status.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBCluster.Endpoint != nil {
		ko.Status.Endpoint = resp.DBCluster.Endpoint
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DBCluster.GlobalWriteForwardingRequested != nil {
		ko.Status.GlobalWriteForwardingRequested = resp.DBCluster.GlobalWriteForwardingRequested
	} else {
		ko.Status.GlobalWriteForwardingRequested = nil
	}
	if resp.DBCluster.GlobalWriteForwardingStatus != nil {
		ko.Status.GlobalWriteForwardingStatus = resp.DBCluster.GlobalWriteForwardingStatus
	} else {
		ko.Status.GlobalWriteForwardingStatus = nil
	}
	if resp.DBCluster.HostedZoneId != nil {
		ko.Status.HostedZoneID = resp.DBCluster.HostedZoneId
	} else {
		ko.Status.HostedZoneID = nil
	}
	if resp.DBCluster.HttpEndpointEnabled != nil {
		ko.Status.HTTPEndpointEnabled = resp.DBCluster.HttpEndpointEnabled
	} else {
		ko.Status.HTTPEndpointEnabled = nil
	}
	if resp.DBCluster.IAMDatabaseAuthenticationEnabled != nil {
		ko.Status.IAMDatabaseAuthenticationEnabled = resp.DBCluster.IAMDatabaseAuthenticationEnabled
	} else {
		ko.Status.IAMDatabaseAuthenticationEnabled = nil
	}
	if resp.DBCluster.LatestRestorableTime != nil {
		ko.Status.LatestRestorableTime = &metav1.Time{*resp.DBCluster.LatestRestorableTime}
	} else {
		ko.Status.LatestRestorableTime = nil
	}
	if resp.DBCluster.MultiAZ != nil {
		ko.Status.MultiAZ = resp.DBCluster.MultiAZ
	} else {
		ko.Status.MultiAZ = nil
	}
	if resp.DBCluster.PendingModifiedValues != nil {
		f43 := &svcapitypes.ClusterPendingModifiedValues{}
		if resp.DBCluster.PendingModifiedValues.DBClusterIdentifier != nil {
			f43.DBClusterIdentifier = resp.DBCluster.PendingModifiedValues.DBClusterIdentifier
		}
		if resp.DBCluster.PendingModifiedValues.EngineVersion != nil {
			f43.EngineVersion = resp.DBCluster.PendingModifiedValues.EngineVersion
		}
		if resp.DBCluster.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
			f43.IAMDatabaseAuthenticationEnabled = resp.DBCluster.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
		}
		if resp.DBCluster.PendingModifiedValues.MasterUserPassword != nil {
			f43.MasterUserPassword = resp.DBCluster.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f43f4 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f43f4f0 := []*string{}
				for _, f43f4f0iter := range resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
					var f43f4f0elem string
					f43f4f0elem = *f43f4f0iter
					f43f4f0 = append(f43f4f0, &f43f4f0elem)
				}
				f43f4.LogTypesToDisable = f43f4f0
			}
			if resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f43f4f1 := []*string{}
				for _, f43f4f1iter := range resp.DBCluster.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
					var f43f4f1elem string
					f43f4f1elem = *f43f4f1iter
					f43f4f1 = append(f43f4f1, &f43f4f1elem)
				}
				f43f4.LogTypesToEnable = f43f4f1
			}
			f43.PendingCloudwatchLogsExports = f43f4
		}
		ko.Status.PendingModifiedValues = f43
	} else {
		ko.Status.PendingModifiedValues = nil
	}
	if resp.DBCluster.PercentProgress != nil {
		ko.Status.PercentProgress = resp.DBCluster.PercentProgress
	} else {
		ko.Status.PercentProgress = nil
	}
	if resp.DBCluster.ReadReplicaIdentifiers != nil {
		f48 := []*string{}
		for _, f48iter := range resp.DBCluster.ReadReplicaIdentifiers {
			var f48elem string
			f48elem = *f48iter
			f48 = append(f48, &f48elem)
		}
		ko.Status.ReadReplicaIdentifiers = f48
	} else {
		ko.Status.ReadReplicaIdentifiers = nil
	}
	if resp.DBCluster.ReaderEndpoint != nil {
		ko.Status.ReaderEndpoint = resp.DBCluster.ReaderEndpoint
	} else {
		ko.Status.ReaderEndpoint = nil
	}
	if resp.DBCluster.ScalingConfigurationInfo != nil {
		f51 := &svcapitypes.ScalingConfigurationInfo{}
		if resp.DBCluster.ScalingConfigurationInfo.AutoPause != nil {
			f51.AutoPause = resp.DBCluster.ScalingConfigurationInfo.AutoPause
		}
		if resp.DBCluster.ScalingConfigurationInfo.MaxCapacity != nil {
			f51.MaxCapacity = resp.DBCluster.ScalingConfigurationInfo.MaxCapacity
		}
		if resp.DBCluster.ScalingConfigurationInfo.MinCapacity != nil {
			f51.MinCapacity = resp.DBCluster.ScalingConfigurationInfo.MinCapacity
		}
		if resp.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause != nil {
			f51.SecondsUntilAutoPause = resp.DBCluster.ScalingConfigurationInfo.SecondsUntilAutoPause
		}
		if resp.DBCluster.ScalingConfigurationInfo.TimeoutAction != nil {
			f51.TimeoutAction = resp.DBCluster.ScalingConfigurationInfo.TimeoutAction
		}
		ko.Status.ScalingConfigurationInfo = f51
	} else {
		ko.Status.ScalingConfigurationInfo = nil
	}
	if resp.DBCluster.Status != nil {
		ko.Status.Status = resp.DBCluster.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.DBCluster.TagList != nil {
		f54 := []*svcapitypes.Tag{}
		for _, f54iter := range resp.DBCluster.TagList {
			f54elem := &svcapitypes.Tag{}
			if f54iter.Key != nil {
				f54elem.Key = f54iter.Key
			}
			if f54iter.Value != nil {
				f54elem.Value = f54iter.Value
			}
			f54 = append(f54, f54elem)
		}
		ko.Status.TagList = f54
	} else {
		ko.Status.TagList = nil
	}
	if resp.DBCluster.VpcSecurityGroups != nil {
		f55 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f55iter := range resp.DBCluster.VpcSecurityGroups {
			f55elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f55iter.Status != nil {
				f55elem.Status = f55iter.Status
			}
			if f55iter.VpcSecurityGroupId != nil {
				f55elem.VPCSecurityGroupID = f55iter.VpcSecurityGroupId
			}
			f55 = append(f55, f55elem)
		}
		ko.Status.VPCSecurityGroups = f55
	} else {
		ko.Status.VPCSecurityGroups = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.ModifyDBClusterInput, error) {
	res := &svcsdk.ModifyDBClusterInput{}

	if r.ko.Spec.BacktrackWindow != nil {
		res.SetBacktrackWindow(*r.ko.Spec.BacktrackWindow)
	}
	if r.ko.Spec.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*r.ko.Spec.BackupRetentionPeriod)
	}
	if r.ko.Spec.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*r.ko.Spec.CopyTagsToSnapshot)
	}
	if r.ko.Spec.DBClusterIdentifier != nil {
		res.SetDBClusterIdentifier(*r.ko.Spec.DBClusterIdentifier)
	}
	if r.ko.Spec.DBClusterParameterGroupName != nil {
		res.SetDBClusterParameterGroupName(*r.ko.Spec.DBClusterParameterGroupName)
	}
	if r.ko.Spec.DeletionProtection != nil {
		res.SetDeletionProtection(*r.ko.Spec.DeletionProtection)
	}
	if r.ko.Spec.Domain != nil {
		res.SetDomain(*r.ko.Spec.Domain)
	}
	if r.ko.Spec.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*r.ko.Spec.DomainIAMRoleName)
	}
	if r.ko.Spec.EnableGlobalWriteForwarding != nil {
		res.SetEnableGlobalWriteForwarding(*r.ko.Spec.EnableGlobalWriteForwarding)
	}
	if r.ko.Spec.EnableHTTPEndpoint != nil {
		res.SetEnableHttpEndpoint(*r.ko.Spec.EnableHTTPEndpoint)
	}
	if r.ko.Spec.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*r.ko.Spec.EnableIAMDatabaseAuthentication)
	}
	if r.ko.Spec.EngineVersion != nil {
		res.SetEngineVersion(*r.ko.Spec.EngineVersion)
	}
	if r.ko.Spec.MasterUserPassword != nil {
		tmpSecret, err := rm.rr.SecretValueFromReference(ctx, r.ko.Spec.MasterUserPassword)
		if err != nil {
			return nil, err
		}
		if tmpSecret != "" {
			res.SetMasterUserPassword(tmpSecret)
		}
	}
	if r.ko.Spec.OptionGroupName != nil {
		res.SetOptionGroupName(*r.ko.Spec.OptionGroupName)
	}
	if r.ko.Spec.Port != nil {
		res.SetPort(*r.ko.Spec.Port)
	}
	if r.ko.Spec.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*r.ko.Spec.PreferredBackupWindow)
	}
	if r.ko.Spec.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*r.ko.Spec.PreferredMaintenanceWindow)
	}
	if r.ko.Spec.ScalingConfiguration != nil {
		f22 := &svcsdk.ScalingConfiguration{}
		if r.ko.Spec.ScalingConfiguration.AutoPause != nil {
			f22.SetAutoPause(*r.ko.Spec.ScalingConfiguration.AutoPause)
		}
		if r.ko.Spec.ScalingConfiguration.MaxCapacity != nil {
			f22.SetMaxCapacity(*r.ko.Spec.ScalingConfiguration.MaxCapacity)
		}
		if r.ko.Spec.ScalingConfiguration.MinCapacity != nil {
			f22.SetMinCapacity(*r.ko.Spec.ScalingConfiguration.MinCapacity)
		}
		if r.ko.Spec.ScalingConfiguration.SecondsUntilAutoPause != nil {
			f22.SetSecondsUntilAutoPause(*r.ko.Spec.ScalingConfiguration.SecondsUntilAutoPause)
		}
		if r.ko.Spec.ScalingConfiguration.TimeoutAction != nil {
			f22.SetTimeoutAction(*r.ko.Spec.ScalingConfiguration.TimeoutAction)
		}
		res.SetScalingConfiguration(f22)
	}
	if r.ko.Spec.VPCSecurityGroupIDs != nil {
		f23 := []*string{}
		for _, f23iter := range r.ko.Spec.VPCSecurityGroupIDs {
			var f23elem string
			f23elem = *f23iter
			f23 = append(f23, &f23elem)
		}
		res.SetVpcSecurityGroupIds(f23)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer exit(err)
	if clusterDeleting(r) {
		return requeueWaitWhileDeleting
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return err
	}
	_, err = rm.sdkapi.DeleteDBClusterWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteDBCluster", err)
	return err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteDBClusterInput, error) {
	res := &svcsdk.DeleteDBClusterInput{}

	if r.ko.Spec.DBClusterIdentifier != nil {
		res.SetDBClusterIdentifier(*r.ko.Spec.DBClusterIdentifier)
	}
	res.SetSkipFinalSnapshot(true)

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.DBCluster,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}

	if rm.terminalAWSError(err) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		terminalCondition.Status = corev1.ConditionTrue
		awsErr, _ := ackerr.AWSError(err)
		errorMessage := awsErr.Message()
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Message()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "DBClusterQuotaExceededFault",
		"DBParameterGroupNotFound",
		"DBSubnetGroupNotFoundFault",
		"DBSubnetGroupDoesNotCoverEnoughAZs",
		"DomainNotFoundFault",
		"InsufficientStorageClusterCapacity",
		"InvalidParameter",
		"InvalidParameterValue",
		"InvalidParameterCombination",
		"InvalidDBClusterStateFault",
		"InvalidDBInstanceStateFault",
		"InvalidSubnet",
		"InvalidVPCNetworkStateFault",
		"KMSKeyNotAccessibleFault",
		"StorageQuotaExceeded":
		return true
	default:
		return false
	}
}
